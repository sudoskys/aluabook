<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on LUA book</title>
    <link>https://lua.dianas.cyou/</link>
    <description>Recent content in Introduction on LUA book</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://lua.dianas.cyou/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>02-01 String</title>
      <link>https://lua.dianas.cyou/docs/02/0201string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/02/0201string/</guid>
      <description>字符串 #   From 小何  字符串操作 #  转义符 #  \n 换行(LF) ，将当前位置移到下一行开头 \r 回车(CR) ，将当前位置移到本行开头 \t 水平制表(HT) （跳到下一个TAB位置） \\ 代表一个反斜线字符\ \&amp;#39; 代表一个单引号（撇号）字符 \&amp;#34;代表一个双引号字符 \0空字符(NULL) 链接字符串只需要使用 .. #  print(&amp;#34;i&amp;#34;..&amp;#39;love&amp;#39;) 计算字符串长度使用#字符串 #  miao = &amp;#34;https://lua.dianas.cyou/&amp;#34; print(#miao) 正则操作字符串 #  我们使用正则表达式来截取字符串，简单的截取请看示例
str=&amp;#34;左中右&amp;#34; --取左 左=str:match(&amp;#34;(.+)中&amp;#34;) --取字符串中间 中=str:match(&amp;#34;左(.-)右&amp;#34;) --取字符串右边 右=str:match(&amp;#34;中(.+)&amp;#34;) 常用正则如下  详细内容 ...  常用正则(Lua中需要将\换成%)： 非负整数：^\d+$ 正整数：^[0-9]*[1-9][0-9]*$ 非正整数：^((-\d+)|(0+))$ 负整数：^-[0-9]*[1-9][0-9]*$ 整数：^-?\d+$ 非负浮点数：^\d+(\.\d+)?$ 正浮点数 : ^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)$ 非正浮点数：^((-\d+\.\d+)?)|(0+(\.0+)?))$ 负浮点数：^(-((正浮点数正则式)))$ 英文字符串：^[A-Za-z]+$ 英文大写串：^[A-Z]+$ 英文小写串：^[a-z]+$ 英文字符数字串：^[A-Za-z0-9]+$ 英数字加下划线串：^\w+$ E-mail地址：^[\w-]+(\.</description>
    </item>
    
    <item>
      <title>02-02 Layout</title>
      <link>https://lua.dianas.cyou/docs/02/0202layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/02/0202layout/</guid>
      <description>布局 #  未完持续</description>
    </item>
    
    <item>
      <title>03-01 案例分析01</title>
      <link>https://lua.dianas.cyou/docs/03/0301/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/03/0301/</guid>
      <description>BiliFanViewer #  From sudoskys  工程源码与在线浏览请见章首页(0节)  工程结构 #  . ├── BiliFanViewer.zip //源代码打包 ├── capsule //字符资源库 │ ├── layout //布局库 │ │ ├── item.aly │ │ └── now.aly │ └── value //变量库 │ ├── color.lua │ └── str.lua ├── core //核心函数库 │ ├── cores.lua │ ├── hotup.lua │ ├── rule.lua │ ├── rule.lua.bak │ └── runs.lua ├── icon.png ├── init.lua // ├── layout.aly //布局文件 ├── libs //包的目录 │ └── android-support-v4.</description>
    </item>
    
    <item>
      <title>03-02 拒绝做糟糕的开发者[*]</title>
      <link>https://lua.dianas.cyou/docs/03/0302/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/03/0302/</guid>
      <description>From Overdose &amp;amp; sudoskys  https://iflynote.com/h/s/doc/W5zNYAzJvliY4Xbc
题目：如何开发可能成功的作品，拒绝做糟糕的开发者。 #  如果您认为本建议内容与您的认知有冲突，请跳过。
FusionApp这里指FusionApp 2.0 Beta 8.7.2
 一.设计流程 #  界面设计 #  设计风格统一，尽可能使用AndroidX与质感库的内容。 界面尽可能现代。请勿开发粗制滥造的作品。建议您使用Material Design。
文件资源 #  您应使资源文件存放得当，不应使用户等待冗长的动画。应使动画自然流畅（请善用插值器）。
功能设计 #  您应使功能稳定，应遵照用户情况增减功能。功能应围绕明确的主题。 您应使功能简单易用（复杂的功能应配有说明） 您可以或应当收费您耗费大量心血的核心功能，您应维持功能完整可靠。对于他人编写内容，请辨明开源协议！！
三.质量建议 #  您的应用内不应出现过多易触发的漏洞 您的正式版内不应出现未完善的内容 小规模应用不应对大量的内容收费 大规模应用应具有完善的收费系统 您不应时常催促用户购买收费内容或向作者捐赠 您的应用提示语应礼貌得体
四.迭代 #  您的应用迭代速度不应过于频繁！ 频次最好以两周一版本为好。太过频繁的更新会显著降低用户体验。内测的版本请开发完毕后再上线&amp;hellip;. 用户不需要为应用迭代考虑过多
迭代的版本号上调应符合规范（详细请自行查阅搜索引擎） 迭代的内容应列出日志，供用户随时查看，用户享有知情权。
对于正在小范围测试的应用，迭代的内容不应过少 对于大规模被使用的应用，迭代内容不应过大 α（Alpha）版本不应向任何人供应 β（Beta）版本可小范围供部分用户测试
五.相关 #  建议您独立编写协议（即使字数较少，也好于模板）。 您应在用户使用您的应用前告知协议。 您应说明您使用的开源内容，这是社区公约，法庭具有效力.
六.安全 #  您不应出卖用户的隐私。 您不应获取过多用户的隐私。 您不应向他人展示用户的隐私。 您应保证他人不会通过您的应用获取他人的隐私。 您应优先修复安全漏洞。 您的热更新作用范围不应过大。</description>
    </item>
    
    <item>
      <title>04-01 when的用法</title>
      <link>https://lua.dianas.cyou/docs/04/0401when/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0401when/</guid>
      <description>When的用法 #   From MLUA  When就相当于简化过的if，对于一些简单的判断使用when会爽不少
例如下面这个栗子
--以前判断要这样写 if 5&amp;gt;1 then print(&amp;#34;OK&amp;#34;) end 在androlua+4.3.3更新后可以这样写
when 5&amp;gt;1 print(&amp;#34;OK&amp;#34;) 以前判断要这样写
if 1&amp;gt;5 then print(&amp;#34;emmmm&amp;#34;) else print(&amp;#34;OK&amp;#34;) end 在androlua+4.3.3更新后可以这样写
when 1&amp;gt;5 print(&amp;#34;emmmm&amp;#34;) else print(&amp;#34;OK&amp;#34;) </description>
    </item>
    
    <item>
      <title>04-02 Defer关键字</title>
      <link>https://lua.dianas.cyou/docs/04/0402defer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0402defer/</guid>
      <description>Defer关键字 #   From MLUA   延时执行，还有自动回收，可以在error时执行
&amp;ndash;@ninenr语录
 function test() print(1) print(2) print(3) print(4) end test() 运行这个函数，可以看到由上至下打印出1234
function test() defer print(1) defer print(2) print(3) defer print(4) end test()--运行这个函数，可以看到打印出了3421 说明代码运行顺序是先运行无defer的，然后有defer的从下往上运行</description>
    </item>
    
    <item>
      <title>04-03 LuaWebView自定义进度条</title>
      <link>https://lua.dianas.cyou/docs/04/0403luawebviewzidingyi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0403luawebviewzidingyi/</guid>
      <description>LuaWebView #   From MLUA  自定义进度条 #   需要web.dex，稍微有点麻烦，详见视频教程
删除进度条
web.removeView(web.getChildAt(0)) 导包
import &amp;#34;com.lua.*&amp;#34; 进度改变事件
web.setWebChromeClient(LuaWebChrome(LuaWebChrome.IWebChrine{ onProgressChanged=function(view, newProgress) --事件 end, LuaWebView设置UA #   import &amp;#34;android.webkit.WebSettings&amp;#34; local webSettings = LuaWebViewID.getSettings(); local newUserAgent = &amp;#34;UA字符串&amp;#34;; webSettings.setUserAgentString(newUserAgent); 获取与设置cookie #   import &amp;#34;android.webkit.CookieSyncManager&amp;#34; import &amp;#34;android.webkit.CookieManager&amp;#34; function 设置Cookie(context,url,content) CookieSyncManager.createInstance(context) local cookieManager = CookieManager.getInstance() cookieManager.setAcceptCookie(true) cookieManager.removeSessionCookie() cookieManager.removeAllCookie() cookieManager.setCookie(url, content) CookieSyncManager.getInstance().sync() end function 获取Cookie(url) local cookieManager = CookieManager.getInstance(); return cookieManager.getCookie(url); end --示例 --获取https://www.</description>
    </item>
    
    <item>
      <title>04-04 字符串</title>
      <link>https://lua.dianas.cyou/docs/04/0404string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0404string/</guid>
      <description>字符串 #   From MLUA  字符串保留URL #   string.gkeepUrl=function(str) local strurltab={} for i,v in string.gfind(str,&amp;#34;https?://[-A-Za-z0-9+&amp;amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+&amp;amp;@#/%=~_|]&amp;#34;) do strurltab[#strurltab+1]=string.sub(str,i,v) end return strurltab end --返回的是table，该方式支持保留多个链接 --调用示例 str=&amp;#34;MLuaForum https://www.mukapp.top/ Lua优化性能小结 https://www.mukapp.top/?thread-19.htm&amp;#34; print(dump(str:gkeepUrl())) local str1=&amp;#34;&amp;#34; for i,v in ipairs(string.gkeepUrl(str)) do str1=str1..v..&amp;#34; &amp;#34; end print(str1) 字符串保留与过滤中文 #   --有中文符号会乱码 string.filterChinese=function(str)return string.gsub(str,&amp;#34;[\u4e00-\u9fa5]+&amp;#34;,&amp;#34;&amp;#34;)end string.keepChinese=function(str)return string.gsub(str,&amp;#34;[^\u4e00-\u9fa5]+&amp;#34;,&amp;#34;&amp;#34;)end --调用示例 str=&amp;#34;MLua手册是一个全新的Androlua+的手册&amp;#34; --过滤中文 print(string.filterChinese(str)) print(str:filterChinese()) --保留中文 print(string.keepChinese(str)) print(str:keepChinese()) Json解析 #   --导入 JSON=import &amp;#34;json&amp;#34; --json字符串 json_str=[==[ [ { &amp;#34;title&amp;#34;: &amp;#34;第一本书&amp;#34;, &amp;#34;bookId&amp;#34;: &amp;#34;book_1&amp;#34; }, { &amp;#34;title&amp;#34;: &amp;#34;第二本书&amp;#34;, &amp;#34;bookId&amp;#34;: &amp;#34;book_2&amp;#34; } ] ]==] --解析json json_o=JSON.</description>
    </item>
    
    <item>
      <title>04-05 界面&amp;布局</title>
      <link>https://lua.dianas.cyou/docs/04/0405layout/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0405layout/</guid>
      <description>布局 #   From MLUA  布局基础 #   获取ListView垂直坐标 #  function getScrollY() c = ls.getChildAt(0); local firstVisiblePosition = ls.getFirstVisiblePosition(); local top = c.getTop(); return -top + firstVisiblePosition * c.getHeight() ; end 设置控件图片 #  --设置的图片也可以输入路径 ID.setImageBitmap(loadbitmap(&amp;#34;图片.png&amp;#34;)) 获取控件宽高 #  --导入包 import &amp;#34;android.content.Context&amp;#34; function getwh(view) view.measure(View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED)); height =view.getMeasuredHeight(); width =view.getMeasuredWidth(); return width,height end print(getwh(控件ID)) 隐藏滚动条 #  --横向 horizontalScrollBarEnabled=false; --竖向 VerticalScrollBarEnabled=false; 禁用编辑框 #  --代码中设置 editText.setFocusable(false); --布局表中设置 Focusable=false; 标题栏返回按钮 #  activity.</description>
    </item>
    
    <item>
      <title>04-06 系统调用</title>
      <link>https://lua.dianas.cyou/docs/04/0406system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0406system/</guid>
      <description>系统 #   From MLUA  申请root权限 #  --shell命令的方法 os.execute(&amp;#34;su&amp;#34;) 分享文字 #  import &amp;#34;android.content.*&amp;#34; text=&amp;#34;分享的内容&amp;#34; intent=Intent(Intent.ACTION_SEND); intent.setType(&amp;#34;text/plain&amp;#34;); intent.putExtra(Intent.EXTRA_SUBJECT, &amp;#34;分享&amp;#34;); intent.putExtra(Intent.EXTRA_TEXT, text); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); activity.startActivity(Intent.createChooser(intent,&amp;#34;分享到:&amp;#34;)); 设置横屏竖屏 #  --横屏 activity.setRequestedOrientation(0); --竖屏 activity.setRequestedOrientation(1); Shell执行 #  function exec(cmd) local p=io.popen(string.format(&amp;#39;%s&amp;#39;,cmd)) local s=p:read(&amp;#34;*a&amp;#34;) p:close() return s end print(exec(&amp;#34;echo ....&amp;#34;)) 部分常用命令: --删除文件或文件夹 rm -r /路径 --复制文件或文件夹 cp -r inpath outpath --移动文件或文件夹 mv -r inpath outpath --挂载系统目录 mount -o remount,rw path --修改系统文件权限 chmod 755 /system/build.</description>
    </item>
    
    <item>
      <title>04-07 各式算法</title>
      <link>https://lua.dianas.cyou/docs/04/0407caculate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0407caculate/</guid>
      <description>各种算法 #  From MLUA  字符串MD5 #   代码详情 ...  function MD5(str) local HexTable = {&amp;#34;0&amp;#34;,&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;5&amp;#34;,&amp;#34;6&amp;#34;,&amp;#34;7&amp;#34;,&amp;#34;8&amp;#34;,&amp;#34;9&amp;#34;,&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;,&amp;#34;E&amp;#34;,&amp;#34;F&amp;#34;} local A = 0x67452301 local B = 0xefcdab89 local C = 0x98badcfe local D = 0x10325476 local S11 = 7 local S12 = 12 local S13 = 17 local S14 = 22 local S21 = 5 local S22 = 9 local S23 = 14 local S24 = 20 local S31 = 4 local S32 = 11 local S33 = 16 local S34 = 23 local S41 = 6 local S42 = 10 local S43 = 15 local S44 = 21 local function F(x,y,z) return (x &amp;amp; y) | ((~x) &amp;amp; z) end local function G(x,y,z) return (x &amp;amp; z) | (y &amp;amp; (~z)) end local function H(x,y,z) return x ~ y ~ z end local function I(x,y,z) return y ~ (x | (~z)) end local function FF(a,b,c,d,x,s,ac) a = a + F(b,c,d) + x + ac a = (((a &amp;amp; 0xffffffff) &amp;lt;&amp;lt; s) | ((a &amp;amp; 0xffffffff) &amp;gt;&amp;gt; 32 - s)) + b return a &amp;amp; 0xffffffff end local function GG(a,b,c,d,x,s,ac) a = a + G(b,c,d) + x + ac a = (((a &amp;amp; 0xffffffff) &amp;lt;&amp;lt; s) | ((a &amp;amp; 0xffffffff) &amp;gt;&amp;gt; 32 - s)) + b return a &amp;amp; 0xffffffff end local function HH(a,b,c,d,x,s,ac) a = a + H(b,c,d) + x + ac a = (((a &amp;amp; 0xffffffff) &amp;lt;&amp;lt; s) | ((a &amp;amp; 0xffffffff) &amp;gt;&amp;gt; 32 - s)) + b return a &amp;amp; 0xffffffff end local function II(a,b,c,d,x,s,ac) a = a + I(b,c,d) + x + ac a = (((a &amp;amp; 0xffffffff) &amp;lt;&amp;lt; s) | ((a &amp;amp; 0xffffffff) &amp;gt;&amp;gt; 32 - s)) + b return a &amp;amp; 0xffffffff end local function MD5StringFill(s) local len = s:len() local mod512 = len * 8 % 512 --需要填充的字节数 local fillSize = (448 - mod512) // 8 if mod512 &amp;gt; 448 then fillSize = (960 - mod512) // 8 end local rTab = {} --记录当前byte在4个字节的偏移 local byteIndex = 1 for i = 1,len do local index = (i - 1) // 4 + 1 rTab[index] = rTab[index] or 0 rTab[index] = rTab[index] | (s:byte(i) &amp;lt;&amp;lt; (byteIndex - 1) * 8) byteIndex = byteIndex + 1 if byteIndex == 5 then byteIndex = 1 end end --先将最后一个字节组成4字节一组 --表示0x80是否已插入 local b0x80 = false local tLen = #rTab if byteIndex ~= 1 then rTab[tLen] = rTab[tLen] | 0x80 &amp;lt;&amp;lt; (byteIndex - 1) * 8 b0x80 = true end --将余下的字节补齐 for i = 1,fillSize // 4 do if not b0x80 and i == 1 then rTab[tLen + i] = 0x80 else rTab[tLen + i] = 0x0 end end --后面加原始数据bit长度 local bitLen = math.</description>
    </item>
    
    <item>
      <title>04-08 信息&amp;发送</title>
      <link>https://lua.dianas.cyou/docs/04/0408sent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0408sent/</guid>
      <description>判断是否有网络 #  local wl=activity.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE).getActiveNetworkInfo(); if wl== nil then print(&amp;#34;无法连接到服务器&amp;#34;) end 发送邮件 #  import &amp;#34;android.content.Intent&amp;#34; i = Intent(Intent.ACTION_SEND) i.setType(&amp;#34;message/rfc822&amp;#34;) i.putExtra(Intent.EXTRA_EMAIL, {&amp;#34;2113075983@.com&amp;#34;}) i.putExtra(Intent.EXTRA_SUBJECT,&amp;#34;Feedback&amp;#34;) i.putExtra(Intent.EXTRA_TEXT,&amp;#34;Content&amp;#34;) activity.startActivity(Intent.createChooser(i, &amp;#34;Choice&amp;#34;)) 自带Http模块 #  获取内容 get函数 Http.get(url,cookie,charset,header,callback) url 网络请求的链接网址 cookie 使用的cookie，也就是服务器的身份识别信息 charset 内容编码 header 请求头 callback 请求完成后执行的函数 除了url和callback其他参数都不是必须的 回调函数接受四个参数值分别是 code 响应代码，2xx表示成功，4xx表示请求错误，5xx表示服务器错误，-1表示出错 content 内容，如果code是-1，则为出错信息 cookie 服务器返回的用户身份识别信息 header 服务器返回的头信息 向服务器发送数据 post函数 Http.post(url,data,cookie,charset,header,callback) 除了增加了一个data外，其他参数和get完全相同 data 向服务器发送的数据 下载文件 download函数 Http.download(url,path,cookie,header,callback) 参数中没有编码参数，其他同get， path 文件保存路径 需要特别注意一点，只支持同时有127个网络请求，否则会出错 Http其实是对Http.HttpTask的封装，Http.HttpTask使用的更加通用和灵活的形式 参数格式如下 Http.HttpTask( url, String method, cookie, charset, header, callback) 所有参数都是必选，没有则传入nil url 请求的网址 method 请求方法可以是get，post，put，delete等 cookie 身份验证信息 charset 内容编码 header 请求头 callback 回调函数 该函数返回的是一个HttpTask对象， 需要调用execute方法才可以执行， t=Http.</description>
    </item>
    
    <item>
      <title>04-09 事件</title>
      <link>https://lua.dianas.cyou/docs/04/0409sthing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0409sthing/</guid>
      <description>事件 #  播放音频 #  --导入包 import &amp;#34;android.media.MediaPlayer&amp;#34; local 音频播放器=MediaPlayer() function 播放音频(路径) 音频播放器.reset() .setDataSource(路径) .prepare() .start() .setOnCompletionListener({ onCompletion=function() print(&amp;#34;播放完毕&amp;#34;) end}) end 强制结束自身并清除自身数据 #  os.execute(&amp;#34;pm clear &amp;#34;..activity.getPackageName()) 调用系统下载 #  --导入包 import &amp;#34;android.content.Context&amp;#34; import &amp;#34;android.net.Uri&amp;#34; downloadManager=activity.getSystemService(Context.DOWNLOAD_SERVICE); url=Uri.parse(&amp;#34;绝对下载链接&amp;#34;); request=DownloadManager.Request(url); request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE|DownloadManager.Request.NETWORK_WIFI); request.setDestinationInExternalPublicDir(&amp;#34;目录名，可以是Download&amp;#34;,&amp;#34;下载的文件名&amp;#34;); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); downloadManager.enqueue(request); 获取本应用包名 #  activity.getPackageName() 删除ListView中某项 #  adp.remove(pos) 获取剪贴板内容 #  import&amp;#34;android.content.*&amp;#34; --导入包 a=activity.getSystemService(Context.CLIPBOARD_SERVICE).getText() 对话框Dialog #  --简单对话框 AlertDialog.Builder(this).setTitle(&amp;#34;标题&amp;#34;) .setMessage(&amp;#34;简单消息框&amp;#34;) .setPositiveButton(&amp;#34;确定&amp;#34;,nil) .show(); --带有三个按钮的对话框 AlertDialog.Builder(this) .setTitle(&amp;#34;确认&amp;#34;) .setMessage(&amp;#34;确定吗？&amp;#34;) .setPositiveButton(&amp;#34;是&amp;#34;,nil) .</description>
    </item>
    
    <item>
      <title>04-10 文件处理</title>
      <link>https://lua.dianas.cyou/docs/04/0410file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0410file/</guid>
      <description>递归搜索文件实例 #  require &amp;#34;import&amp;#34; function find(catalog,name) local n=0 local t=os.clock() local ret={} require &amp;#34;import&amp;#34; import &amp;#34;java.io.File&amp;#34; import &amp;#34;java.lang.String&amp;#34; function FindFile(catalog,name) local name=tostring(name) local ls=catalog.listFiles() or File{} for 次数=0,#ls-1 do --local 目录=tostring(ls[次数]) local f=ls[次数] if f.isDirectory() then--如果是文件夹则继续匹配 FindFile(f,name) else--如果是文件则 n=n+1 if n%1000==0 then --print(n,os.clock()-t) end local nm=f.Name if string.find(nm,name) then --thread(insert,目录) table.insert(ret,nm) print(nm) end end luajava.clear(f) end end FindFile(catalog,name) print(&amp;#34;ok&amp;#34;,n,#ret) end import &amp;#34;java.io.File&amp;#34; catalog=File(&amp;#34;sdcard/&amp;#34;) name=&amp;#34;.j?pn?g&amp;#34; --task(find,catalog,name,print) thread(find,catalog,name) 获取Lua文件的执行路径 #  activity.</description>
    </item>
    
    <item>
      <title>04-11 动画</title>
      <link>https://lua.dianas.cyou/docs/04/0411animation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/04/0411animation/</guid>
      <description>控件旋转 #  --Z轴上的旋转角度 View.getRotation() --X轴上的旋转角度 View.getRotationX() --Y轴上的旋转角度 View.getRotationY() --设置Z轴上的旋转角度 View.setRotation(r) --设置X轴上的旋转角度 View.setRotationX(r) --设置Y轴上的旋转角度 View.setRotationY(r) --设置旋转中心点的X坐标 View.setPivotX(p) --设置旋转中心点的Y坐标 View.setPivotX(p) --设置摄像机的与旋转目标在Z轴上距离 View.setCameraDistance(d) 动画结束回调 #  --导入包 import &amp;#34;android.view.animation.*&amp;#34; import &amp;#34;android.view.animation.Animation$AnimationListener&amp;#34; --控件动画 控件.startAnimation(AlphaAnimation(1,0).setDuration(400).setFillAfter(true).setAnimationListener(AnimationListener{ onAnimationEnd=function() print&amp;#34;动画结束&amp;#34;) end})) 安卓跳转动画 #  android.R.anim.accelerate_decelerate_interpolator android.R.anim.accelerate_interpolator android.R.anim.anticipate_interpolator android.R.anim.anticipate_overshoot_interpolator android.R.anim.bounce_interpolator android.R.anim.cycle_interpolator android.R.anim.decelerate_interpolatoandroid.R.anim.r android.R.anim.fade_in android.R.anim.fade_out android.R.anim.linear_interpolator android.R.anim.overshoot_interpolator android.R.anim.slide_in_left android.R.anim.slide_out_right Animation(动画) #  --动画主要包括以下几种 Alpha:渐变透明度动画效果 Scale:渐变尺寸伸缩动画效果 Translate:画面转换位置移动动画效果 Rotate:画面转换位置移动动画效果 --共有的属性有 Duration --属性为动画持续时间 时间以毫秒为单位 fillAfter --当设置为true,该动画转化在动画结束后被应用 fillBefore --当设置为true,该动画转化在动画开始前被应用 repeatCount--动画的重复次数 repeatMode --定义重复的行为 startOffset --动画之间的时间间隔，从上次动画停多少时间开始执行下个动画 id.</description>
    </item>
    
    <item>
      <title>01-01 开发素养</title>
      <link>https://lua.dianas.cyou/docs/01/0101sudo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/01/0101sudo/</guid>
      <description>素养 #   From sudoskys  对于不少小伙伴来说，Androlua是你们接触的第一个开发工具，那么如何使用优美的lua写出规范的代码，提升自己写代码的气质捏？
请阅读以下内容。
 📜命名规范 #  常见命名规范 #  小驼峰式 第一个单词首字母小写，后面其他单词首字母大写
例子 #  myAge=18 myName[10] dianaLove=&amp;#34;me&amp;#34; 大驼峰式 每个单词的第一个字母都要大写。
例子 #  MyAge=3 MyName[10] DianaLove=&amp;#34;me&amp;#34; 下划线法 可以结合其他方法使用
例子 #  _My_Age=3 _My_Name[10] _Diana_Love=&amp;#34;me&amp;#34; 匈牙利法 早期的规范，由微软的一个匈牙利人发明的。确定变量的类型，系统却又琐碎。
要求前缀字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，单词第一个字母大写。
例子 #  --注意类型 iMyAge=3 --int cMyName[10] --char sDiana_Love=&amp;#34;me&amp;#34; --str  命名规范补充 #   匈牙利法中类型有哪些？ ...  a 数组（Array） b 布尔值（Boolean） by 字节（Byte） c 有符号字符（Char） cb 无符号字符（Char Byte，并没有神马人用的） cr 颜色参考值（Color Ref） cx,cy 坐标差（长度 Short Int） dw 双字（Double Word） fn 函数（Function） h Handle（句柄） i 整形（Int） l 长整型（Long Int） lp 长指针（Long Pointer） m_ 类成员（Class Member） n 短整型（Short Int） np 近程指针（Near Pointer） p 指针（Pointer） s 字符串（String） sz 以 Null 做结尾的字符串型（String with Zero End） w 字（Word）     📚真正的学习Lua #   不要习惯于当CV工程师 #   理由很简单，如果你习惯于依赖示例代码，而不去真正研究这门语言本身或你复制的代码的每一行，你就不能扩展，不能提升，不能写出属于自己的项目，不能自己产出什么东西，永远被别人牵着走。</description>
    </item>
    
    <item>
      <title>01-02 认识Alua写法</title>
      <link>https://lua.dianas.cyou/docs/01/0102alua/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/docs/01/0102alua/</guid>
      <description>打印 #  print&amp;#34;Hello World！&amp;#34; print(&amp;#34;Hello World&amp;#34;) 注释 #  单行注释 -- 多行注释 --[[]] 字符串 #  a=&amp;#34;String&amp;#34; a=[[String]] a=[===[String]===] 赋值 #  a=&amp;#34;Hello World&amp;#34; --lua支持多重赋值 a,b=&amp;#34;String a&amp;#34;,&amp;#34;String b&amp;#34; --交换值 a,b=&amp;#34;String a&amp;#34;,&amp;#34;String b&amp;#34; a,b=b,a For循环 #  --给定条件进行循环 --输出从1到10 for i=1,10 do print(i) end --输出从10到1 for i=10,1,-1 do print(i) end --打印数组a中所有的值 a={&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;} for index,content in pairs(a) do print(content) end While循环 #  --只要条件为真便会一直循环下去 --输出1到10 a=0 while a~=10 do a=a+1 print(a) end --输出10到1 a=11 while a~=1 do a=a-1 print(a) end --打印数组a中的所有值 shuzu={&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;} a=0 while a~=#shuzu do a=a+1 print(shuzu[a]) end if(判断语句) #  --判断值是否为真 a=true if a then print(&amp;#34;真&amp;#34;) else print(&amp;#34;假&amp;#34;) end --比较值是否相同 a=true b=false if a==b then print(&amp;#34;真&amp;#34;) else print(&amp;#34;假&amp;#34;) end function(函数) #  函数有两个用途 1.</description>
    </item>
    
    <item>
      <title>文档语法</title>
      <link>https://lua.dianas.cyou/posts/01new/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/posts/01new/</guid>
      <description>文档语法 #   Markdown content
info|warning|danger
  MacOS MacOS Content #  Linux Linux Content #  Windows Windows Content #     问题 ...  本文档使用的代码来自于     Contribute   导航 0012121000   #  欢迎各位补充本文档   文档格式 #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content.</description>
    </item>
    
    <item>
      <title>资源列表</title>
      <link>https://lua.dianas.cyou/posts/02res/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/posts/02res/</guid>
      <description> . ├── 03 │ └── 01 │ └── BiliFanViewer │ └── BiliFanViewer.zip ├── frame.zip ├── lua_Kit.zip └── xiaohe_teach.zip </description>
    </item>
    
    <item>
      <title>Lua-App编程上机的三个方案</title>
      <link>https://lua.dianas.cyou/posts/03vscode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lua.dianas.cyou/posts/03vscode/</guid>
      <description>Lua-App编程上机的三个方案 #  三种，不是三步！！
 原作sudoskys,同步于lua.dianas.cyou
 1.敲到键盘：Termux搭建code-server,实机调试 #    本篇教程可以让你：拥有一个随身Vscode（python环境），多机协同体验，（映射或反代后远程编写体验），可运行python脚本额外体验，与不受限制的LUA应用编写体验。
 PS：你最好有一定的linux使用经验&amp;hellip;&amp;hellip;
所需项目 #  Termux #   项目地址 https://gitee.com/mo2/linux
   下载安装termux GIThub镜像站 https://ghproxy.com/ https://git.yumenaka.net/ APP源 https://f-droid.org/repository/browse/?fdid=com.termux https://github.com/termux/termux-app
  直链(22年0201):
  输入termux-setup-storage开启文件访问权限。
  使用tmoe项目快速搭建debian(推荐)或其他linux环境（请选择proot） （参考https://haohe.fun/2021/04/tmoe-linux%EF%BC%9A%E5%9C%A8android-%E5%92%8Cwindows10%E4%B8%8A%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85-gnu-linux%E5%AE%B9%E5%99%A8/）
  具体操作
bash -c &amp;#34;$(curl -fsSL https://gitee.com/mo2/linux/raw/2/2)&amp;#34; 耐心等待安装完毕，请勿熄屏！！！！！！！（要授权什么的）
 其中，具体选择中，可以创建新用户作为ROOT。（推荐） 这个用户以后使用 su 命令来登陆。 其中，运行proot容器我使用KDE,比较像WIN.容易操作。 其中，一定要看清楚说明信息呃 安装完毕请完全重新启动APP。 输入debian启动最近的容器，终端输入neofetch查看系统信息。 接着输入novnc开启局域网VNC链接，（请确认您安装novnc,tmoe已经为您预装）。
打开局域网地址（终端输出信息），然后链接。就可以体验卡卡卡卡卡的桌面。
 PS：命令执行都可以使用Ctrl +键盘敲击 C 来中断操作
  CODE-server（VScode服务端） #  官方安装教程 https://github.</description>
    </item>
    
  </channel>
</rss>
