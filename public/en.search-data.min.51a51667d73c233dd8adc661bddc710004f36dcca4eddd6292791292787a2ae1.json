[{"id":0,"href":"/docs/01/","title":"01-00 初步认识LUA","section":"WELCOME","content":"初步认识LUA #   标准文档看这里 LUA 5.3 参考手册\n翻译版本（云风翻译）LUA 5.3 中文手册\n快速认识一下普遍写法 #  LUA简洁优美，Androlua提供的自带包大大方便了我们的开发。\n--simplely use import (for androlua aide) import \u0026#34;android.net.Uri\u0026#34; --str _love = 100000 _love = love + 1 print(_love) _me_=str(_love)..\u0026#34;diana\u0026#34; print(_me_) --my love ,diana see you --[[ opps! can you bilibili 关注向晚？ ]] --function function mes(strs) print(strs);print(123) end you=function(strs) print(strs);print(123) end you(\u0026#34;hi\u0026#34;) mes(\u0026#34;hello\u0026#34;) function top(str,sc) print(str) sc(\u0026#34;function here\u0026#34;) end top(\u0026#34;can use function\u0026#34;,you) --if else if me==1 then nai0=0 else nai0=1 end 解惑 #  我该不该学习Androlua  如果你开始学习了Alua,那么代表着两件事情。\n 你将成为一名 独立应用开发者 你踏入了E4A领域  简而言之，你在使用安卓开发安卓应用。\n Q：Alua的社区环境如何？\nA：社区支持很少，我目前了解到的基本都是马来西亚（某报）与国内开发社群（QQ群多数,葫芦侠，某猫，官方论坛，自建论坛，以及衍生的Fusion app论坛-酷安）\n Q：Alua的开源例子如何？\nA：GITHUB基本没有关于alua的项目，大部分人选择在论坛或QQ群，应用内开源，开源的应用代码质量参次不齐。少有的优秀项目（比如 Tumeng，哈兔box ，云储 ，MYluaapp Mlua手册 ，风车等等）。\n Q：Alua的开发者都是怎样的人？\nA：真正有学识的开发者较少，有眼界的也很少。大佬看不上，很多才子又因为可怜的社区支持跳板到了其他语言领域。这种情况在好转，不过仍缺乏一个大的论坛中心和足够有力的支持。\n "},{"id":1,"href":"/docs/02/","title":"02-00 教程","section":"WELCOME","content":"From sudoskys 依据各大佬的文档编写     参考资料 作者     小何教程 小何    "},{"id":2,"href":"/docs/02/0201string/","title":"02-01 String","section":"02-00 教程","content":"字符串 #   From 小何  字符串操作 #  转义符 #  \\n 换行(LF) ，将当前位置移到下一行开头 \\r 回车(CR) ，将当前位置移到本行开头 \\t 水平制表(HT) （跳到下一个TAB位置） \\\\ 代表一个反斜线字符\\ \\\u0026#39; 代表一个单引号（撇号）字符 \\\u0026#34;代表一个双引号字符 \\0空字符(NULL) 链接字符串只需要使用 .. #  print(\u0026#34;i\u0026#34;..\u0026#39;love\u0026#39;) 计算字符串长度使用#字符串 #  miao = \u0026#34;https://lua.dianas.cyou/\u0026#34; print(#miao) 正则操作字符串 #  我们使用正则表达式来截取字符串，简单的截取请看示例\nstr=\u0026#34;左中右\u0026#34; --取左 左=str:match(\u0026#34;(.+)中\u0026#34;) --取字符串中间 中=str:match(\u0026#34;左(.-)右\u0026#34;) --取字符串右边 右=str:match(\u0026#34;中(.+)\u0026#34;) 常用正则如下  详细内容 ...  常用正则(Lua中需要将\\换成%)： 非负整数：^\\d+$ 正整数：^[0-9]*[1-9][0-9]*$ 非正整数：^((-\\d+)|(0+))$ 负整数：^-[0-9]*[1-9][0-9]*$ 整数：^-?\\d+$ 非负浮点数：^\\d+(\\.\\d+)?$ 正浮点数 : ^((0-9)+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)$ 非正浮点数：^((-\\d+\\.\\d+)?)|(0+(\\.0+)?))$ 负浮点数：^(-((正浮点数正则式)))$ 英文字符串：^[A-Za-z]+$ 英文大写串：^[A-Z]+$ 英文小写串：^[a-z]+$ 英文字符数字串：^[A-Za-z0-9]+$ 英数字加下划线串：^\\w+$ E-mail地址：^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$ URL：^[a-zA-Z]+://(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\s*)?$ 或：^http:\\/\\/[A-Za-z0-9]+\\.[A-Za-z0-9]+[\\/=\\?%\\-\u0026amp;_~`@[\\]\\\u0026#39;:+!]*([^\u0026lt;\u0026gt;\\\u0026#34;\\\u0026#34;])*$ 邮政编码：^[1-9]\\d{5}$ 中文：^[\\u0391-\\uFFE5]+$ 电话号码：^((\\(\\d{2,3}\\))|(\\d{3}\\-))?(\\(0\\d{2,3}\\)|0\\d{2,3}-)?[1-9]\\d{6,7}(\\-\\d{1,4})?$ 手机号码：^((\\(\\d{2,3}\\))|(\\d{3}\\-))?13\\d{9}$ 双字节字符(包括汉字在内)：^\\x00-\\xff匹配首尾空格：(^\\s*)|(\\s*$)（像vbscript那样的trim函数） 匹配HTML标记：\u0026lt;(.*)\u0026gt;.*\u0026lt;\\/\\1\u0026gt;|\u0026lt;(.*) \\/\u0026gt; 匹配空行：\\n[\\s| ]*\\r提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) *= *(\u0026#39;|\u0026#34;)?(\\w|\\\\|\\/|\\.)+(\u0026#39;|\u0026#34;| *|\u0026gt;)? 提取信息中的邮件地址：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)* 提取信息中的图片链接：(s|S)(r|R)(c|C) *= *(\u0026#39;|\u0026#34;)?(\\w|\\\\|\\/|\\.)+(\u0026#39;|\u0026#34;| *|\u0026gt;)? 提取信息中的IP地址：(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+) 提取信息中的中国手机号码：(86)*0*13\\d{9} 提取信息中的中国固定电话号码：(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{8} 提取信息中的中国电话号码（包括移动和固定电话）：(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{7,14} 提取信息中的中国邮政编码：[1-9]{1}(\\d+){5} 提取信息中的浮点数（即小数）：(-?\\d*)\\.?\\d+ 提取信息中的任何数字 ：(-?\\d*)(\\.\\d+)? IP：(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+) 电话区号：/^0\\d{2,3}$/ 腾讯QQ号：^[1-9]*[1-9][0-9]*$ 帐号(字母开头，允򋮅-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 中文、英文、数字及下划线：^[\\u4e00-\\u9fa5_a-zA-Z0-9]+$ 匹配中文字符的正则表达式： [\\u4e00-\\u9fa5] 匹配双字节字符(包括汉字在内)：[^\\x00-\\xff] 匹配空行的正则表达式：\\n[\\s| ]*\\r匹配HTML标记的正则表达式：/\u0026lt;(.*)\u0026gt;.*\u0026lt;\\/\\1\u0026gt;|\u0026lt;(.*) \\/\u0026gt;/ sql语句：^(select|drop|delete|create|update|insert).*$ 匹配首尾空格的正则表达式：(^\\s*)|(\\s*$) 匹򑓞mail地址的正则表达式：\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*     替换与捕获 #  --替换 string.gsub(str,appla,apple) --原字符，替换目标，替换为 --定位并捕获 start,ends=string.find(字符串,子串) target=string.sub(字符串,start,ends) 其他API #  string.upper(argument) 字符串全部转为大写字母。 string.lower(argument) 字符串全部转为小写字母。 string.gsub(mainString,findString,replaceString,num) 在字符串中替换,mainString为要替换的字符串， findString 为被替换的字符，replaceString 要替换的字符，num 替换次数（可以忽略，则全部替换） string.find (str, substr, [init, [end]]) 在一个指定的目标字符串中搜索指定的内容(第三个参数为索引),返回其具体位置。不存在则返回 nil。 string.reverse(arg) 字符串反转 string.format(...) 返回一个类似printf的格式化字符串 string.char(arg) 和 string.byte(arg[,int]) char 将整型数字转成字符并连接， byte 转换字符为整数值(可以指定某个字符，默认第一个字符)。 string.len(arg) 计算字符串长度。 string.rep(string, n) 返回字符串string的n个拷贝 .. 链接两个字符串 string.gmatch(str, pattern) 回一个迭代器函数，每一次调用这个函数，返回一个在字符串 str 找到的下一个符合 pattern 描述的子串。如果参数 pattern 描述的字符串没有找到，迭代函数返回nil。 string.match(str, pattern, init) string.match()只寻找源字串str中的第一个配对. 参数init可选, 指定搜寻过程的起点, 默认񎎡。 在成功配对时, 函数将返回配对表达式中的所有捕获结果; 如果没有设置捕获标记, 则返回整个配对字符串. 当没有成功的配对时, 返回nil。 其中的string.format() 的转义码如下\n%c - 接受一个数字, 并将其转化񎎪SCII码表中对应的字符 %d, %i - 接受一个数字并将其转化为有符号的整数格式 %o - 接受一个数字并将其转化为八进制数格式 %u - 接受一个数字并将其转化为无符号整数格式 %x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母 %X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母 %e - 接受一个数字并将其转化为科学记数法格式, 使用小写字񫳞 %E - 接受一个数字并将其转化为科学记数法格式, 使用大写字񫳞 %f - 接受一个数字并将其转化为浮点数格式 %g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式 %q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式 %s - 接受一个字符串并按照给定的参数格式化该字符串 LUA匹配模式 #  Lua的匹配模式： .(点): 与任何字符配对 %a: 与任何字母配对 %c: 与任何控制符配对(例如\\n) %d: 与任何数字配对 %l: 与任何小写字母配对 %p: 与任何标点(punctuation)配对 %s: 与空白字符配对 %u: 与任何大写字母配对 %w: 与任何字母/数字配对 %x: 与任何十六进制数配对 %z: 与任何代򈚀的字符配对 %x(此处x是非字母非数字字符): 与字符x配对. 主要用来处理表达式中有功能的字符(^$()%.[]*+-?)的配对问题, 例如%%与%配对 [数个字符类]: 与任何[]中包含的字符类配对. 例如[%w_]与任何字母/数字, 或下划线符号(_)配对 [^数个字符类]: 与任何不包含在[]中的字符类配对. 例如[^%s]与任何非空白字符配对 单个字符类匹配该类别中任意单个字符； 单个字符类跟一个 \u0026#39;*\u0026#39;， 将匹配零或多个该类的字符。 这个条目总是匹配尽可能长的串； 单个字符类跟一个 \u0026#39;+\u0026#39;， 将匹配一或更多个该类的字符。 这个条目总是匹配尽可能长的串； 单个字符类跟一个 \u0026#39;-\u0026#39;， 将匹配零或更多个该类的字符。 和 \u0026#39;*\u0026#39; 不同， 这个条目总是匹配尽可能短的串； 单个字符类跟一个 \u0026#39;?\u0026#39;， 将匹配零或一个该类的字符。 只要有可能，它会匹配一个； %n， 这里的 n 可以从 1 到 9； 这个条目匹配一个等于 n 号捕获物（后面有描述）的子串。 %bxy， 这里的 x 和 y 是两个明确的字符； 这个条目匹配以 x 开始 y 结束， 且其中 x 和 y 保持 平衡 的字符串。 意思是，如果从左到右读这个字符串，对每次读到一个 x 就 +1 ，读到一个 y 就 -1， 最终结束处的那个 y 是第一个记数到 0 的 y。 举个例子，条目 %b() 可以匹配到括号平衡的表达式。 %f[set]， 指 边境模式； 这个条目会匹配到一个位于 set 内某个字符之前的一个空串， 且这个位置的前一个字符不属于 set 。 集合 set 的含义如前面所述。 匹配出的那个空串之开始和结束点的计算就看成该处有个字符 \u0026#39;\\0\u0026#39; 一样。 "},{"id":3,"href":"/docs/02/0202layout/","title":"02-02 Layout","section":"02-00 教程","content":"布局 #  未完持续\n"},{"id":4,"href":"/docs/03/","title":"03-00 工程笔记","section":"WELCOME","content":"源代码 #  From sudoskys  确定前缀 #  GIT 国外可以用https://raw.githubusercontent.com/sudoskys/aluabook/main/resources/res/ 国内可以用https://raw.fastgit.org/sudoskys/aluabook/main/resources/res/\n确定后缀 #  /res/章节/小节/BiliFanViewer/+文件名字 /res/章节/小节/项目名字/项目名字.zip\n举栗子 https://raw.fastgit.org/res/03/01/BiliFanViewer/BiliFanViewer.zip #  全部代码，除了特别标识引用的以外全部以MIT协议开源。\n   参考资料 作者     无 无    "},{"id":5,"href":"/docs/03/0301/","title":"03-01 案例分析01","section":"03-00 工程笔记","content":"BiliFanViewer #  From sudoskys  工程源码与在线浏览请见章首页(0节)  工程结构 #  . ├── BiliFanViewer.zip //源代码打包 ├── capsule //字符资源库 │ ├── layout //布局库 │ │ ├── item.aly │ │ └── now.aly │ └── value //变量库 │ ├── color.lua │ └── str.lua ├── core //核心函数库 │ ├── cores.lua │ ├── hotup.lua │ ├── rule.lua │ ├── rule.lua.bak │ └── runs.lua ├── icon.png ├── init.lua // ├── layout.aly //布局文件 ├── libs //包的目录 │ └── android-support-v4.dex ├── main.lua //主函数 ├── readme.md //开发人员用 ├── src //存储src资源 │ └── drawable //程序图标 │ ├── add_icon.png │ └── nothing.png └── welcome.png // androlua开屏图 为什么要这么架构工程？ #  根据安卓标准，我们应该使用合格的工程架构目录。 本文编写人推荐使用的工程目录如下：\n . ├── layout │ ├── action │ └── formal ├── libs ├── res │ ├── drawable │ └── source ├── run │ ├── base.lua │ └── mods └── value └── base 工程模板在 前缀+/res/frame.zip\nhttps://luares.dianas.cyou/\n"},{"id":6,"href":"/docs/03/0302/","title":"03-02 拒绝做糟糕的开发者[*]","section":"03-00 工程笔记","content":"From Overdose \u0026amp; sudoskys  https://iflynote.com/h/s/doc/W5zNYAzJvliY4Xbc\n题目：如何开发可能成功的作品，拒绝做糟糕的开发者。 #  如果您认为本建议内容与您的认知有冲突，请跳过。\nFusionApp这里指FusionApp 2.0 Beta 8.7.2\n 一.设计流程 #  界面设计 #  设计风格统一，尽可能使用AndroidX与质感库的内容。 界面尽可能现代。请勿开发粗制滥造的作品。建议您使用Material Design。\n文件资源 #  您应使资源文件存放得当，不应使用户等待冗长的动画。应使动画自然流畅（请善用插值器）。\n功能设计 #  您应使功能稳定，应遵照用户情况增减功能。功能应围绕明确的主题。 您应使功能简单易用（复杂的功能应配有说明） 您可以或应当收费您耗费大量心血的核心功能，您应维持功能完整可靠。对于他人编写内容，请辨明开源协议！！\n三.质量建议 #  您的应用内不应出现过多易触发的漏洞 您的正式版内不应出现未完善的内容 小规模应用不应对大量的内容收费 大规模应用应具有完善的收费系统 您不应时常催促用户购买收费内容或向作者捐赠 您的应用提示语应礼貌得体\n四.迭代 #  您的应用迭代速度不应过于频繁！ 频次最好以两周一版本为好。太过频繁的更新会显著降低用户体验。内测的版本请开发完毕后再上线\u0026hellip;. 用户不需要为应用迭代考虑过多\n迭代的版本号上调应符合规范（详细请自行查阅搜索引擎） 迭代的内容应列出日志，供用户随时查看，用户享有知情权。\n对于正在小范围测试的应用，迭代的内容不应过少 对于大规模被使用的应用，迭代内容不应过大 α（Alpha）版本不应向任何人供应 β（Beta）版本可小范围供部分用户测试\n五.相关 #  建议您独立编写协议（即使字数较少，也好于模板）。 您应在用户使用您的应用前告知协议。 您应说明您使用的开源内容，这是社区公约，法庭具有效力.\n六.安全 #  您不应出卖用户的隐私。 您不应获取过多用户的隐私。 您不应向他人展示用户的隐私。 您应保证他人不会通过您的应用获取他人的隐私。 您应优先修复安全漏洞。 您的热更新作用范围不应过大。\n密码最好采用不可逆算法加密后存储，防止被入侵。\n"},{"id":7,"href":"/docs/04/","title":"04-00 MLUA教程","section":"WELCOME","content":"MLUA教程 #  From MLUA https://github.com/MUKAPP/MLua-Handbook-WEB/blob/master/code.txt     参考资料 作者     MLUA手册 MLUA    "},{"id":8,"href":"/docs/04/0401when/","title":"04-01 when的用法","section":"04-00 MLUA教程","content":"When的用法 #   From MLUA  When就相当于简化过的if，对于一些简单的判断使用when会爽不少\n例如下面这个栗子\n--以前判断要这样写 if 5\u0026gt;1 then print(\u0026#34;OK\u0026#34;) end 在androlua+4.3.3更新后可以这样写\nwhen 5\u0026gt;1 print(\u0026#34;OK\u0026#34;) 以前判断要这样写\nif 1\u0026gt;5 then print(\u0026#34;emmmm\u0026#34;) else print(\u0026#34;OK\u0026#34;) end 在androlua+4.3.3更新后可以这样写\nwhen 1\u0026gt;5 print(\u0026#34;emmmm\u0026#34;) else print(\u0026#34;OK\u0026#34;) "},{"id":9,"href":"/docs/04/0402defer/","title":"04-02 Defer关键字","section":"04-00 MLUA教程","content":"Defer关键字 #   From MLUA   延时执行，还有自动回收，可以在error时执行\n\u0026ndash;@ninenr语录\n function test() print(1) print(2) print(3) print(4) end test() 运行这个函数，可以看到由上至下打印出1234\nfunction test() defer print(1) defer print(2) print(3) defer print(4) end test()--运行这个函数，可以看到打印出了3421 说明代码运行顺序是先运行无defer的，然后有defer的从下往上运行\n"},{"id":10,"href":"/docs/04/0403luawebviewzidingyi/","title":"04-03 LuaWebView自定义进度条","section":"04-00 MLUA教程","content":"LuaWebView #   From MLUA  自定义进度条 #   需要web.dex，稍微有点麻烦，详见视频教程\n删除进度条\nweb.removeView(web.getChildAt(0)) 导包\nimport \u0026#34;com.lua.*\u0026#34; 进度改变事件\nweb.setWebChromeClient(LuaWebChrome(LuaWebChrome.IWebChrine{ onProgressChanged=function(view, newProgress) --事件 end, LuaWebView设置UA #   import \u0026#34;android.webkit.WebSettings\u0026#34; local webSettings = LuaWebViewID.getSettings(); local newUserAgent = \u0026#34;UA字符串\u0026#34;; webSettings.setUserAgentString(newUserAgent); 获取与设置cookie #   import \u0026#34;android.webkit.CookieSyncManager\u0026#34; import \u0026#34;android.webkit.CookieManager\u0026#34; function 设置Cookie(context,url,content) CookieSyncManager.createInstance(context) local cookieManager = CookieManager.getInstance() cookieManager.setAcceptCookie(true) cookieManager.removeSessionCookie() cookieManager.removeAllCookie() cookieManager.setCookie(url, content) CookieSyncManager.getInstance().sync() end function 获取Cookie(url) local cookieManager = CookieManager.getInstance(); return cookieManager.getCookie(url); end --示例 --获取https://www.baidu.com的cookie并打印 print(获取Cookie(\u0026#34;https://www.baidu.com\u0026#34;)) --设置https://www.baidu.com的cookie为This is cookie 设置Cookie(activity,\u0026#34;https://www.baidu.com\u0026#34;,\u0026#34;This is cookie\u0026#34;) --获取https://www.baidu.com的cookie并打印 print(获取Cookie(\u0026#34;https://www.baidu.com\u0026#34;)) "},{"id":11,"href":"/docs/04/0404string/","title":"04-04 字符串","section":"04-00 MLUA教程","content":"字符串 #   From MLUA  字符串保留URL #   string.gkeepUrl=function(str) local strurltab={} for i,v in string.gfind(str,\u0026#34;https?://[-A-Za-z0-9+\u0026amp;@#/%?=~_|!:,.;]+[-A-Za-z0-9+\u0026amp;@#/%=~_|]\u0026#34;) do strurltab[#strurltab+1]=string.sub(str,i,v) end return strurltab end --返回的是table，该方式支持保留多个链接 --调用示例 str=\u0026#34;MLuaForum https://www.mukapp.top/ Lua优化性能小结 https://www.mukapp.top/?thread-19.htm\u0026#34; print(dump(str:gkeepUrl())) local str1=\u0026#34;\u0026#34; for i,v in ipairs(string.gkeepUrl(str)) do str1=str1..v..\u0026#34; \u0026#34; end print(str1) 字符串保留与过滤中文 #   --有中文符号会乱码 string.filterChinese=function(str)return string.gsub(str,\u0026#34;[\\u4e00-\\u9fa5]+\u0026#34;,\u0026#34;\u0026#34;)end string.keepChinese=function(str)return string.gsub(str,\u0026#34;[^\\u4e00-\\u9fa5]+\u0026#34;,\u0026#34;\u0026#34;)end --调用示例 str=\u0026#34;MLua手册是一个全新的Androlua+的手册\u0026#34; --过滤中文 print(string.filterChinese(str)) print(str:filterChinese()) --保留中文 print(string.keepChinese(str)) print(str:keepChinese()) Json解析 #   --导入 JSON=import \u0026#34;json\u0026#34; --json字符串 json_str=[==[ [ { \u0026#34;title\u0026#34;: \u0026#34;第一本书\u0026#34;, \u0026#34;bookId\u0026#34;: \u0026#34;book_1\u0026#34; }, { \u0026#34;title\u0026#34;: \u0026#34;第二本书\u0026#34;, \u0026#34;bookId\u0026#34;: \u0026#34;book_2\u0026#34; } ] ]==] --解析json json_o=JSON.decode(json_str) --打印table print(dump(json_o)) --遍历打印table for i,v in ipairs(json_o) do print(v.title,v.bookId) end 匹配汉字 #  function filter_spec_chars(s) local ss = {} for k = 1, #s do local c = string.byte(s,k) if not c then break end if (c\u0026gt;=48 and c\u0026lt;=57) or (c\u0026gt;= 65 and c\u0026lt;=90) or (c\u0026gt;=97 and c\u0026lt;=122) then if not string.char(c):find(\u0026#34;%w\u0026#34;) then table.insert(ss, string.char(c)) end elseif c\u0026gt;=228 and c\u0026lt;=233 then local c1 = string.byte(s,k+1) local c2 = string.byte(s,k+2) if c1 and c2 then local a1,a2,a3,a4 = 128,191,128,191 if c == 228 then a1 = 184 elseif c == 233 then a2,a4 = 190,c1 ~= 190 and 191 or 165 end if c1\u0026gt;=a1 and c1\u0026lt;=a2 and c2\u0026gt;=a3 and c2\u0026lt;=a4 then k = k + 2 table.insert(ss, string.char(c,c1,c2)) end end end end return table.concat(ss) end print(filter_spec_chars(\u0026#34;A1B2汉C3D4字E5F6,,,\u0026#34;)) --来源网络,加了个if过滤掉英文与数字,使其只捕获中文 判断数组中是否存在某个值 #  function Table_exists(tables,value) for index,content in pairs(tables) do if content:find(value) then return true end end end 字符串操作 #  strings=\u0026#34;左中右\u0026#34; --取字符串左边 左=strings:match(\u0026#34;(.+)中\u0026#34;) --取字符串中间 中=strings:match(\u0026#34;左(.-)右\u0026#34;) --取字符串右边 右=strings:match(\u0026#34;(.+)右\u0026#34;) --替换 string.gsub(原字符串,替换的字符串,替换成的字符串) --匹配子串位置 起始位置,结束位置=string.find(字符串,子串) --按位置捕获字符串 string.sub(字符串,子串起始位置,子串结束位置) 剪切板操作 #  import \u0026#34;android.content.Context\u0026#34; --导入类 a=activity.getSystemService(Context.CLIPBOARD_SERVICE).getText() --获取剪贴板 activity.getSystemService(Context.CLIPBOARD_SERVICE).setText(edit.Text) --写入剪贴板 各种事件 #  function main(...) --...是newActivity传递过来的参数。 print(\u0026#34;入口函数\u0026#34;,...) end function onCreate() print(\u0026#34;窗口创建\u0026#34;) end function onStart() print(\u0026#34;活动开始\u0026#34;) end function onResume() print(\u0026#34;返回程序\u0026#34;) end function onPause() print(\u0026#34;活动暂停\u0026#34;) end function onStop() print(\u0026#34;活动停止\u0026#34;) end function onDestroy() print(\u0026#34;程序已退出\u0026#34;) end function onResult(name,...) --name：返回的活动名称 --...：返回的参数 print(\u0026#34;返回活动\u0026#34;,name,...) end function onCreateOptionsMenu(menu) --menu：选项菜单。 menu.add(\u0026#34;菜单\u0026#34;) end function onOptionsItemSelected(item) --item：选中的菜单项 print(item.Title) end function onConfigurationChanged(config) --config：配置信息 print(\u0026#34;屏幕方向关闭\u0026#34;) end function onKeyDown(keycode,event) --keycode：键值 --event：事件 print(\u0026#34;按键按下\u0026#34;,keycode) end function onKeyUp(keycode,event) --keycode：键值 --event：事件 print(\u0026#34;按键抬起\u0026#34;,keycode) end function onKeyLongPress(keycode,event) --keycode：键值 --event：事件 print(\u0026#34;按键长按\u0026#34;,keycode) end function onTouchEvent(event) --event：事件 print(\u0026#34;触摸事件\u0026#34;,event) end function onKeyDown(c,e) if c==4 then --返回键事件 end end id.onClick=function() --控件被单击 end id.onLongClick=function() --控件被长按 end id.onItemClick=function(p,v,i,s) --列表项目被单击 项目=v.Text return true end id.onItemLongClick=function(p,v,i,s) --列表项目被长按 项目=v.Text return true end id.onItemLongClick=function(p,v,i,s) --列表项目被长按 项目=v.Text return true end --Spinner的项目单击事件 id.onItemSelected=function(l,v,p,i) 项目=v.Text end --ExpandableListView的父项目与子项目单击事件 id.onGroupClick=function(l,v,p,s) print(v.Text..\u0026#34;:GroupClick\u0026#34;) end id.onChildClick=function(l,v,g,c) print(v.Text..\u0026#34;:ChildClick\u0026#34;) end 取随机数 #  math.random(最小值,最大值) 字符串操作 #  --字符串转大写 string.upper(字符串) --字符串转小写 string.lower(字符串) --字符串替换 string.gsub(字符串,被替换的字符,替换的字符,替换次数) 取字符串中间 #  string.match(\u0026#34;左测试测试右\u0026#34;,\u0026#34;左(.-)右\u0026#34;) "},{"id":12,"href":"/docs/04/0405layout/","title":"04-05 界面\u0026布局","section":"04-00 MLUA教程","content":"布局 #   From MLUA  布局基础 #   获取ListView垂直坐标 #  function getScrollY() c = ls.getChildAt(0); local firstVisiblePosition = ls.getFirstVisiblePosition(); local top = c.getTop(); return -top + firstVisiblePosition * c.getHeight() ; end 设置控件图片 #  --设置的图片也可以输入路径 ID.setImageBitmap(loadbitmap(\u0026#34;图片.png\u0026#34;)) 获取控件宽高 #  --导入包 import \u0026#34;android.content.Context\u0026#34; function getwh(view) view.measure(View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED),View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED)); height =view.getMeasuredHeight(); width =view.getMeasuredWidth(); return width,height end print(getwh(控件ID)) 隐藏滚动条 #  --横向 horizontalScrollBarEnabled=false; --竖向 VerticalScrollBarEnabled=false; 禁用编辑框 #  --代码中设置 editText.setFocusable(false); --布局表中设置 Focusable=false; 标题栏返回按钮 #  activity.getActionBar().setDisplayHomeAsUpEnabled(true) 列表长按事件 #  ID.setOnItemLongClickListener(AdapterView.OnItemLongClickListener{ onItemLongClick=function(parent, v, pos,id) --事件 end }) 列表点击事件 #  ID.setOnItemClickListener(AdapterView.OnItemClickListener{ onItemClick=function(parent, v, pos,id) --事件 end }) 隐藏标题栏 #  activity.ActionBar.hide() 设置控件大小 #  --设置宽度 linearParams = 控件ID.getLayoutParams() linearParams.width =宽度 控件ID.setLayoutParams(linearParams) --同理设置高度 linearParams = 控件ID.getLayoutParams() linearParams.height =高度 控件ID.setLayoutParams(linearParams) 载入窗口传参 #  activity.newActivity(\u0026#34;窗口名\u0026#34;,{参数}) --渐变动画效果的，中间是安卓跳转动画代码 activity.newActivity(\u0026#34;窗口名\u0026#34;,android.R.anim.fade_in,android.R.anim.fade_out,{参数}) EditText只能输数字 #  import \u0026#34;android.text.InputType\u0026#34; import \u0026#34;android.text.method.DigitsKeyListener\u0026#34; 控件ID.setInputType(InputType.TYPE_CLASS_NUMBER) 控件ID.setKeyListener(DigitsKeyListener.getInstance(\u0026#34;0123456789\u0026#34;)) 窗口全屏 #  activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) 关闭当前窗口 #  activity.finish() TextView文本可选择复制 #  --代码中设置 t.TextIsSelectable=true --布局表中设置 textIsSelectable=true EditText文本被改变事件 #   控件ID.addTextChangedListener{ onTextChanged=function(s) --事件 end } 标题栏菜单按钮 #  tittle={\u0026#34;分享\u0026#34;,\u0026#34;帮助\u0026#34;,\u0026#34;皮肤\u0026#34;,\u0026#34;退出\u0026#34;} function onCreateOptionsMenu(menu) for k,v in ipairs(tittle) do if tittle[v] then local m=menu.addSubMenu(v) for k,v in ipairs(tittle[v]) do m.add(v) end else local m=menu.add(v) m.setShowAsActionFlags(1) end end end function onMenuItemSelected(id,tittle) if y[tittle.getTitle()] then y[tittle.getTitle()]() end end y={} y[\u0026#34;帮助\u0026#34;]=function() --事件 end --菜单 function onCreateOptionsMenu(menu) menu.add(\u0026#34;打开\u0026#34;).onMenuItemClick=function(a) end menu.add(\u0026#34;新建\u0026#34;).onMenuItemClick=function(a) end end 标题栏(ActionBar) #  --部分常用API show:显示 hide:隐藏 Elevation:设置阴影 BgroundDrawable:设置背景 DisplayHomeAsUpEnabled(boolean):设置是否显示返回图标 --设置标题 activity.ActionBar.setTitle(\u0026#39;大标题\u0026#39;) activity.ActionBar.setSubTitle(\u0026#34;小标题\u0026#34;) --设置ActionBar背景颜色 import \u0026#34;android.graphics.drawable.ColorDrawable\u0026#34; activity.ActionBar.setBackgroundDrawable(ColorDrawable(Color)) --自定义ActionBar标题颜色 import \u0026#34;android.text.SpannableString\u0026#34; import \u0026#34;android.text.style.ForegroundColorSpan\u0026#34; import \u0026#34;android.text.Spannable\u0026#34; sp = SpannableString(\u0026#34;标题\u0026#34;) sp.setSpan(ForegroundColorSpan(0xff1DA6DD),0,#sp,Spannable.SPAN_EXCLUSIVE_INCLUSIVE) activity.ActionBar.setTitle(sp) --自定义ActionBar布局 DisplayShowCustomEnabled(true) CustomView(loadlayout(layout)) --ActionBar返回按钮 activity.ActionBar.setDisplayHomeAsUpEnabled(true) --自定义返回按钮图标 activity.ActionBar.setHomeAsUpIndicator(drawable) --菜单 function onCreateOptionsMenu(menu) menu.add(\u0026#34;菜单1\u0026#34;) menu.add(\u0026#34;菜单2\u0026#34;) menu.add(\u0026#34;菜单3\u0026#34;) end function onOptionsItemSelected(item) print(\u0026#34;你选择了:\u0026#34;..item.Title) end --Tab导航使用 import \u0026#34;android.app.ActionBar$TabListener\u0026#34; actionBar=activity.ActionBar actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS); tab = actionBar.newTab().setText(\u0026#34;Tab1\u0026#34;).setTabListener(TabListener({ onTabSelected=function() print\u0026#34;Tab1\u0026#34; end})) tab2=actionBar.newTab().setText(\u0026#34;Tab2\u0026#34;).setTabListener(TabListener({ onTabSelected=function() print\u0026#34;Tab2\u0026#34; end})) actionBar.addTab(tab) actionBar.addTab(tab2) 五大布局 #  --Android中常用的5大布局方式有以下几种： --线性布局（LinearLayout）：按照垂直或者水平方向布局的组件。 --帧布局（FrameLayout）：组件从屏幕左上方布局组件。 --表格布局（TableLayout）：按照行列方式布局组件。 --相对布局（RelativeLayout）：相对其它组件的布局方式。 --绝对布局（AbsoluteLayout）：按照绝对坐标来布局组件。 1.线性布局(LinearLayout) 线性布局是Android开发中最常见的一种布局方式，它是按照垂直或者水平方向来布局，通过orientation属性可以设置线性布局的方向。属性值有垂直（vertical）和水平（horizontal）两种。 常用的属性： orientation：可以设置布局的方向 gravity:用来控制组件的对齐方式 layout_weight控制各个控件在布局中的相对大小,layout_weight的属性是一个非负整数值。 线性布局会根据该控件layout_weight值与其所处布局中所有控件layout_weight值之和的比值为该控件分配占用的区域 --[[例如，在水平布局的LinearLayout中有两个Button，这两个Button的layout_weight属性值都为1,那么这两个按钮都会被拉伸到整个屏幕宽度的一半。如果layout_weight指为0，控件会按原大小显示，不会被拉伸. 对于其余layout_weight属性值大于0的控件，系统将会减去layout_weight属性值为0的控件的宽度或者高度,再用剩余的宽度或高度按相应的比例来分配每一个控件显示的宽度或高度]] 2.帧布局(FrameLayout) 帧布局是从屏幕的左上角（0,0）坐标开始布局，多个组件层叠排列，第一个添加的组件放到最底层，最后添加到框架中的视图显示在最上面。上一层的会覆盖下一层的控件。 3.表格布局（TableLayout） 表格布局是一个ViewGroup以表格显示它的子视图（view）元素，即行和列标识一个视图的位置。 表格布局常用的属性如下： collapseColumns：隐藏指定的列 shrinkColumns：收缩指定的列以适合屏幕，不会挤出屏幕 stretchColumns：尽量把指定的列填充空白部分 layout_column:控件放在指定的列 layout_span:该控件所跨越的列数 4.相对布局（RelativeLayout） 相对布局是按照组件之间的相对位置来布局，比如在某个组件的左边，右边，上面和下面等。 5.绝对布局(AbsoluteLayout) 采用坐标轴的方式定位组件，左上角是（0，0）点，往右x轴递增，往下Y轴递增,组件定位属性为layout_x 和layout_y来确定坐标。 Widget(普通控件) #  --Button(按钮控件)、TextView(文本控件)、EditText(编辑框控件) 常用API: id.setText(\u0026#34;文本\u0026#34;)--设置控件文本 id.getText()--获取控件文本 id.setWidth(300)--设置控件宽度 id.setHeight(300)--设置控件高度 --点击事件 id.onClick=function() print\u0026#34;你触发了点击事件\u0026#34; end --长按事件 id.onLongClick=function() print\u0026#34;你触发了长按事件\u0026#34; end --图片控件(ImageView与ImageButton) --设置图片 --布局表中用src属性就可以，如:src=图片路径, --动态设置 id.setImageBitmap(loadbitmap(图片路径)) --设置Drawable对象 import \u0026#34;android.graphics.drawable.BitmapDrawable\u0026#34; id.setImageDrawable(BitmapDrawable(loadbitmap(图片路径))) --缩放，scaleType --字段 CENTER� --按原来size居中显示，长/宽超过View的长/宽，截取图片的居中部分显示� CENTER_CROP --按比例扩大图片的size居中显示，使图片长(宽)等于或大于View的长(宽)� CENTER_INSIDE --完整居中显示，按比例缩小使图片长/宽等于或小于View的长/宽� FIT_CENTER --按比例扩大/缩小到View的宽度，居中显示� FIT_END --按比例扩大/缩小到View的宽度，显示在View的下部分位置� FIT_START --按比例扩大/缩小到View的宽度，显示在View的上部分位置� FIT_XY --不按比例扩大/缩小到View的大小显示� MATRIX --用矩阵来绘制，动态缩小放大图片来显示。� --点击与长按事件同上 Check View(检查控件) #  --CheckBox(复选框),Switch(开关控件),ToggleButton(切换按钮) --直接判断是否选中然后执行相应事件即可 --判断API check.isChecked()--返回是否勾选、布尔值 check.isSelected()--返回是否选中、布尔值 --RadioButton(单选按钮)与RadioGroup --将RadioButton的父布局设定为RadioGroup然后绑定下面的监听即可 rp.setOnCheckedChangeListener{ onCheckedChanged=function(g,c) l=g.findViewById(c) print(l.Text) end} SeekBar(拖动条) #  --绑定监听 seekbar.setOnSeekBarChangeListener{ onStartTrackingTouch=function() --开始拖动 end, onStopTrackingTouch=function() --停止拖动 end, onProgressChanged=function() --状态改变 end} --部分API Progress--当前进度 Max--最大进度 ProgressBar(进度条) #  --超大号圆形风格 style=\u0026#34;?android:attr/progressBarStyleLarge\u0026#34; --小号风格 style=\u0026#34;?android:attr/progressBarStyleSmall\u0026#34; --标题型风格 style=\u0026#34;?android:attr/progressBarStyleSmallTitle\u0026#34; --长形进度条 style=\u0026#34;?android:attr/progressBarStyleHorizontal\u0026#34; --部分API max --最大进度值 progress --设置进度值 secondaryProgress=\u0026#34;70\u0026#34; --初始化的底层第二个进度值 id.incrementProgressBy(5) --ProgressBar进度值增加5 id.incrementProgressBy(-5) --ProgressBar进度值减少5 id.incrementSecondaryProgressBy(5) --ProgressBar背后的第二个进度条 进度值增加5 id.incrementSecondaryProgressBy(-5) --ProgressBar背后的第二个进度条 进度值减少5 Adapter View(适配器控件) #  --适配器控件主要包括(ListView,GridView,Spinner,ExpandableList等) --想要动态为此类控件添加项目就必须得要依靠适配器！ --适配器使用 --AarrayAdapter(简单适配器) --创建项目数组 数据={} --添加项目数组 for i=1,100 do table.insert(数据,tostring(i)) end --创建适配器 array_adp=ArrayAdapter(activity,android.R.layout.simple_list_item_1,String(数据)) --设置适配器 lv.setAdapter(array_adp) --LuaAdapter(Lua适配器) --创建自定义项目视图 item={ LinearLayout, orientation=\u0026#34;vertical\u0026#34;, layout_width=\u0026#34;fill\u0026#34;, { TextView, id=\u0026#34;text\u0026#34;, layout_margin=\u0026#34;15dp\u0026#34;, layout_width=\u0026#34;fill\u0026#34; }, } --创建项目数组 data={} --创建适配器 adp=LuaAdapter(activity,data,item) --添加数据 for n=1,100 do table.insert(data,{ text={ Text=tostring(n), }, }) end --设置适配器 lv.Adapter=adp --以上的适配器ListView、Spinner与GridView等控件通用 --那么ExpandableListView(折叠列表)怎么办呢？ --别怕，安卓系统还提供了一个ArrayExpandableListAdapter来给我们使用，可以简单的适配ExpandableListView，下面给出实例 ns={ \u0026#34;Widget\u0026#34;,\u0026#34;Check view\u0026#34;,\u0026#34;Adapter view\u0026#34;,\u0026#34;Advanced Widget\u0026#34;,\u0026#34;Layout\u0026#34;,\u0026#34;Advanced Layout\u0026#34;, } wds={ {\u0026#34;Button\u0026#34;,\u0026#34;EditText\u0026#34;,\u0026#34;TextView\u0026#34;, \u0026#34;ImageButton\u0026#34;,\u0026#34;ImageView\u0026#34;}, {\u0026#34;CheckBox\u0026#34;,\u0026#34;RadioButton\u0026#34;,\u0026#34;ToggleButton\u0026#34;,\u0026#34;Switch\u0026#34;}, {\u0026#34;ListView\u0026#34;,\u0026#34;ExpandableListView\u0026#34;,\u0026#34;Spinner\u0026#34;}, {\u0026#34;SeekBar\u0026#34;,\u0026#34;ProgressBar\u0026#34;,\u0026#34;RatingBar\u0026#34;, \u0026#34;DatePicker\u0026#34;,\u0026#34;TimePicker\u0026#34;,\u0026#34;NumberPicker\u0026#34;}, {\u0026#34;LinearLayout\u0026#34;,\u0026#34;AbsoluteLayout\u0026#34;,\u0026#34;FrameLayout\u0026#34;}, {\u0026#34;RadioGroup\u0026#34;,\u0026#34;GridLayout\u0026#34;, \u0026#34;ScrollView\u0026#34;,\u0026#34;HorizontalScrollView\u0026#34;}, } mAdapter=ArrayExpandableListAdapter(activity) for k,v in ipairs(ns) do mAdapter.add(v,wds[k]) end el.setAdapter(mAdapter) --这样就实现ExpandableListView项目的适配了 --当然AdapterView的事件响应也是与普通控件不同的。 --ListView与GridView的单击与长按事件 --项目被单击 id.onItemClick=function(l,v,p,i) print(v.Text) return true end --项目被长按 id.onItemLongClick=function(l,v,p,i) print(v.Text) return true end --Spinner的项目单击事件 id.onItemSelected=function(l,v,p,i) print(v.Text) end --ExpandableListView的父项目与子项目单击事件 id.onGroupClick=function(l,v,p,s) print(v.Text..\u0026#34;:GroupClick\u0026#34;) end id.onChildClick=function(l,v,g,c) print(v.Text..\u0026#34;:ChildClick\u0026#34;) end LuaWebView(浏览器控件) #  --常用API id.loadUrl(\u0026#34;http://www.androlua.cn\u0026#34;)--加载网页 id.loadUrl(\u0026#34;file:///storage/sdcard0/index.html\u0026#34;)--加载本地文件 id.getTitle()--获取网页标题 id.getUrl()--获取当前Url id.requestFocusFromTouch()--设置支持获取手势焦点 id.getSettings().setJavaScriptEnabled(true)--设置支持JS id.setPluginsEnabled(true)--支持插件 id.setUseWideViewPort(false)--调整图片自适应 id.getSettings().setSupportZoom(true)--支持缩放 id.getSettings().setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN)--支持重新布局 id.supportMultipleWindows()--设置多窗口 id.stopLoading()--停止加载网页 --状态监听 id.setWebViewClient{ shouldOverrideUrlLoading=function(view,url) --Url即将跳转 end, onPageStarted=function(view,url,favicon) --网页加载 end, onPageFinished=function(view,url) --网页加载完成 end} AutoCompleteTextView(自动补全文本框) #  --适配数据 arr={\u0026#34;Rain\u0026#34;,\u0026#34;Rain1\u0026#34;,\u0026#34;Rain2\u0026#34;}; arrayAdapter=LuaArrayAdapter(activity,{TextView,padding=\u0026#34;10dp\u0026#34;,textSize=\u0026#34;18sp\u0026#34;,layout_width=\u0026#34;fill\u0026#34;,textColor=\u0026#34;#ff000000\u0026#34;}, String(arr)) actw.setAdapter(arrayAdapter) Threshold=1--设置输入几个字符后才能出现提示 TimePicker(时间选择器) #  --时间改变监听器 import \u0026#34;android.widget.TimePicker$OnTimeChangedListener\u0026#34; id.setOnTimeChangedListener{ onTimeChanged=function(view,时,分) print(时,分) end} --部分API 时=id.getCurrentHour()--获取小时 分=id.getCurrentMinute()--获取分钟 id.setIs24HourView(Boolean(true))--设置24小时制 DatePicker(日期选择器) #  id=dp 日=id.getDayOfMonth()--获取选择的天数 月=id.getMonth ()--获取选择的月份 年=id.getYear()--获取选择的年份 id.updateDate(2016,1,1)--更新日期 print(年,月,日) NemberPicker(数值选择器) #  setMinValue(0)--设置最小值 setMaxValue(100)--设置最大值 setValue(50)--设置当前值 getValue()--获取选择的值 OnValueChangedListener--数值改变监听器 AlertDialog(对话框) #  --常用API .setTitle(\u0026#34;标题\u0026#34;)--设置标题 .setMessage(\u0026#34;设置消息\u0026#34;)--设置消息 .setView(loadlayout(layout))--设置自定义视图 .setPositiveButton(\u0026#34;积极\u0026#34;,{onClick=function() end})--设置积极按钮 .setNeutralButton(\u0026#34;中立\u0026#34;,nil)--设置中立按钮 .setNegativeButton(\u0026#34;否认\u0026#34;,nil)--设置否认按钮 --普通对话框 AlertDialog.Builder(this) .setTitle(\u0026#34;标题\u0026#34;) .setMessage(\u0026#34;消息\u0026#34;) .setPositiveButton(\u0026#34;积极\u0026#34;,{onClick=function(v) print\u0026#34;点击了积极按钮\u0026#34;end}) .setNeutralButton(\u0026#34;中立\u0026#34;,nil) .setNegativeButton(\u0026#34;否认\u0026#34;,nil) .show() --输入对话框 InputLayout={ LinearLayout; orientation=\u0026#34;vertical\u0026#34;; Focusable=true, FocusableInTouchMode=true, { TextView; id=\u0026#34;Prompt\u0026#34;, textSize=\u0026#34;15sp\u0026#34;, layout_marginTop=\u0026#34;10dp\u0026#34;; layout_marginLeft=\u0026#34;3dp\u0026#34;, layout_width=\u0026#34;80%w\u0026#34;; layout_gravity=\u0026#34;center\u0026#34;, text=\u0026#34;输入:\u0026#34;; }; { EditText; hint=\u0026#34;输入\u0026#34;; layout_marginTop=\u0026#34;5dp\u0026#34;; layout_width=\u0026#34;80%w\u0026#34;; layout_gravity=\u0026#34;center\u0026#34;, id=\u0026#34;edit\u0026#34;; }; }; AlertDialog.Builder(this) .setTitle(\u0026#34;标题\u0026#34;) .setView(loadlayout(InputLayout)) .setPositiveButton(\u0026#34;确定\u0026#34;,{onClick=function(v) print(edit.Text)end}) .setNegativeButton(\u0026#34;取消\u0026#34;,nil) .show() import \u0026#34;android.view.View$OnFocusChangeListener\u0026#34; edit.setOnFocusChangeListener(OnFocusChangeListener{ onFocusChange=function(v,hasFocus) if hasFocus then Prompt.setTextColor(0xFD009688) end end}) --下载文件对话框 Download_layout={ LinearLayout; orientation=\u0026#34;vertical\u0026#34;; id=\u0026#34;Download_father_layout\u0026#34;, { TextView; id=\u0026#34;linkhint\u0026#34;, layout_marginTop=\u0026#34;10dp\u0026#34;; text=\u0026#34;下载链接\u0026#34;, layout_width=\u0026#34;80%w\u0026#34;; textColor=WidgetColors, layout_gravity=\u0026#34;center\u0026#34;; }; { EditText; id=\u0026#34;linkedit\u0026#34;, layout_width=\u0026#34;80%w\u0026#34;; layout_gravity=\u0026#34;center\u0026#34;; }; { TextView; id=\u0026#34;pathhint\u0026#34;, text=\u0026#34;下载路径\u0026#34;, layout_width=\u0026#34;80%w\u0026#34;; textColor=WidgetColors, layout_marginTop=\u0026#34;10dp\u0026#34;; layout_gravity=\u0026#34;center\u0026#34;; }; { EditText; id=\u0026#34;pathedit\u0026#34;, layout_width=\u0026#34;80%w\u0026#34;; layout_gravity=\u0026#34;center\u0026#34;; }; }; AlertDialog.Builder(this) .setTitle(\u0026#34;下载文件\u0026#34;) .setView(loadlayout(Download_layout)) .setPositiveButton(\u0026#34;下载\u0026#34;,{onClick=function(v) end}) .setNegativeButton(\u0026#34;取消\u0026#34;,nil) .show() --列表对话框 items={} for i=1,5 do table.insert(items,\u0026#34;项目\u0026#34;..tostring(i)) end AlertDialog.Builder(this) .setTitle(\u0026#34;列表对话框\u0026#34;) .setItems(items,{onClick=function(l,v) print(items[v+1])end}) .show() --单选对话框 单选列表={} for i=1,5 do table.insert(单选列表,\u0026#34;单选项目\u0026#34;..tostring(i)) end local 单选对话框=AlertDialog.Builder(this) .setTitle(\u0026#34;列表对话框\u0026#34;) .setSingleChoiceItems(单选列表,-1,{onClick=function(v,p)print(单选列表[p+1])end}) 单选对话框.show(); --多选对话框 items={} for i=1,5 do table.insert(items,\u0026#34;多选项目\u0026#34;..tostring(i)) end 多选对话框=AlertDialog.Builder(this) .setTitle(\u0026#34;多选框\u0026#34;) .setMultiChoiceItems(items, nil,{ onClick=function(v,p)print(items[p+1])end}) 多选对话框.show(); ProgressDialog(进度对话框) #  --ProgressDialog__进度条对话框 dialog = ProgressDialog.show(this, \u0026#34;提示\u0026#34;, \u0026#34;正在登陆中\u0026#34;).hide() --最简单便捷的方式 dialog2 = ProgressDialog.show(this, \u0026#34;提示\u0026#34;, \u0026#34;正在登陆中\u0026#34;, false).hide() --最后一个boolean设置是否是不明确的状态 dialog3 = ProgressDialog.show(this, \u0026#34;提示\u0026#34;, \u0026#34;正在登陆中\u0026#34;,false, true).hide() --最后一个boolean设置可以不可以点击取消 dialog4 = ProgressDialog.show(this, \u0026#34;提示\u0026#34;, \u0026#34;正在登陆中\u0026#34;,false, true, DialogInterface.OnCancelListener{ onCancel=function() print(\u0026#34;对话框取消\u0026#34;) end }).hide() --最后一个参数监听对话框取消，并执行事件 --圆形旋转样式 dialog5= ProgressDialog(this) dialog5.setProgressStyle(ProgressDialog.STYLE_SPINNER) dialog5.setTitle(\u0026#34;Loading...\u0026#34;) --设置进度条的形式为圆形转动的进度条 dialog5.setMessage(\u0026#34;ProgressDialog\u0026#34;) dialog5.setCancelable(true)--设置是否可以通过点击Back键取消 dialog5.setCanceledOnTouchOutside(false)--设置在点击Dialog外是否取消Dialog进度条 dialog5.setOnCancelListener{ onCancel=function(l) print(\u0026#34;取消Dialog5\u0026#34;) end} --取消对话框监听事件 dialog5.show().hide() --水平样式 dialog6= ProgressDialog(this) dialog6.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); --设置进度条的形式为水平进度条 dialog6.setTitle(\u0026#34;ProgressDialog_HORIZONTAL\u0026#34;) dialog6.setCancelable(true)--设置是否可以通过点击Back键取消 dialog6.setCanceledOnTouchOutside(false)--设置在点击Dialog外是否取消Dialog进度条 dialog6.setOnCancelListener{ onCancel=function(l) print(\u0026#34;取消Dialog6\u0026#34;) end} --取消对话框监听事件 dialog6.setMax(100) --设置最大进度值 dialog6.show().hide() function 增加(i) dialog6.incrementProgressBy(10) dialog6.incrementSecondaryProgressBy(10) if i==\u0026#34;10\u0026#34; then dialog6.dismiss() print(\u0026#34;加载完成\u0026#34;) end --当进度走完时销毁对话框 end function 加载() require \u0026#34;import\u0026#34; for i=1,10 do Thread.sleep(300) call(\u0026#34;增加\u0026#34;,tostring(i)) end end --thread(加载) InputMethodManager(输入法管理器) #  在Android的开发中，有时候会遇到软键盘弹出时挡住输入框的情况。 这时候可以设置下软键盘的模式就可以了。 activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE|WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) 有时候需要软键盘不要把我们的布局整体推上去，这时候可以这样： activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN) 模式常量： 软输入区域是否可见。 SOFT_INPUT_MASK_STATE = 0x0f 未指定状态。 SOFT_INPUT_STATE_UNSPECIFIED = 0 不要修改软输入法区域的状态 SOFT_INPUT_STATE_UNCHANGED = 1 隐藏输入法区域（当用户进入窗口时 SOFT_INPUT_STATE_HIDDEN = 2 当窗口获得焦点时，隐藏输入法区域 SOFT_INPUT_STATE_ALWAYS_HIDDEN = 3 显示输入法区域（当用户进入窗口时） SOFT_INPUT_STATE_VISIBLE = 4 当窗口获得焦点时，显示输入法区域 SOFT_INPUT_STATE_ALWAYS_VISIBLE = 5 窗口应当主动调整，以适应软输入窗口。 SOFT_INPUT_MASK_ADJUST = 0 窗口应当主动调整，以适应软输入窗口。 SOFT_INPUT_MASK_ADJUST = 0xf0 未指定状态，系统将根据窗口内容尝试选择一个输入法样式。 SOFT_INPUT_ADJUST_UNSPECIFIED = 0x00 当输入法显示时，允许窗口重新计算尺寸，使内容不被输入法所覆盖。 不可与SOFT_INPUT_ADJUSP_PAN混合使用；如果两个都没有设置，系统将根据窗口内容自动设置一个选项。 SOFT_INPUT_ADJUST_RESIZE = 0x10 输入法显示时平移窗口。它不需要处理尺寸变化，框架能够移动窗口以确保输入焦点可见。 不可与SOFT_INPUT_ADJUST_RESIZE混合使用；如果两个都没有设置，系统将根据窗口内容自动设置一个选项。 SOFT_INPUT_ADJUST_PAN = 0x20 当用户转至此窗口时，由系统自动设置，所以你不要设置它。 当窗口显示之后该标志自动清除。 SOFT_INPUT_IS_FORWARD_NAVIGATION = 0x100 其它Api参考: import \u0026#34;android.view.inputmethod.InputMethodManager\u0026#34; 调用显示系统默认的输入法 imm = activity.getSystemService(Context.INPUT_METHOD_SERVICE) imm.showSoftInput(m_receiverView(接受软键盘输入的视图(View)),InputMethodManager.SHOW_FORCED(提供当前操作的标记，SHOW_FORCED表示强制显示)) 如果输入法关闭则打开，如果输入法打开则关闭 imm = activity.getSystemService(Context.INPUT_METHOD_SERVICE) imm.toggleSoftInput(0,InputMethodManager.HIDE_NOT_ALWAYS) 获取软键盘是否打开 imm = activity.getSystemService(Context.INPUT_METHOD_SERVICE) isOpen=imm.isActive() --返回一个布尔值 隐藏软键盘 activity.getSystemService(INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(WidgetSearchActivity.this.getCurrentFocus().getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS) 显示软键盘 activity.getSystemService(INPUT_METHOD_SERVICE)).showSoftInput(控件ID, 0) PopMenu(弹出式菜单) #  pop=PopupMenu(activity,view) menu=pop.Menu menu.add(\u0026#34;项目1\u0026#34;).onMenuItemClick=function(a) end menu.add(\u0026#34;项目2\u0026#34;).onMenuItemClick=function(a) end pop.show()--显示 PopWindow(弹出式窗口) #  pop=PopWindow(activity)--创建PopWindow pop.setContentView(loadlayout(布局))--设置布局 pop.setWidth(activity.Width*0.3)--设置宽度 pop.setHeight(activity.Width*0.3)--设置高度 pop.setFocusable(true)--设置可获得焦点 window.setTouchable(true)--设置可触摸 --设置点击外部区域是否可以消失 pop.setOutsideTouchable(false) --显示 pop.showAtLocation(view,0,0,0) Toast(提示) #  --默认Toast Toast.makeText(activity, \u0026#34;Toast\u0026#34;,Toast.LENGTH_SHORT).show() --自定义位置Toast Toast.makeText(activity,\u0026#34;自定义位置Toast\u0026#34;, Toast.LENGTH_LONG).setGravity(Gravity.CENTER, 0, 0).show() --带图片Toast 图片=loadbitmap(\u0026#34;/sdcard/a.png\u0026#34;) toast = Toast.makeText(activity,\u0026#34;带图片的Toast\u0026#34;, Toast.LENGTH_LONG) toastView = toast.getView() imageCodeProject = ImageView(activity) imageCodeProject.setImageBitmap(图片) toastView.addView(imageCodeProject, 0) toast.show() --自定义布局Toast 布局=loadlayout(layout) local toast=Toast.makeText(activity,\u0026#34;提示\u0026#34;,Toast.LENGTH_SHORT).setView(布局).show() 控件常用属性 #  --EditText(输入框) singleLine=true--设置单行输入 Error=\u0026#34;错误的输入\u0026#34;--设置用户输入了错误的信息时的提醒 MaxLines=5--设置最大输入行数 MaxEms=5--设置每行最大宽度为五个字符的宽度 InputType=\u0026#34;number\u0026#34;--设置只可输入数字 Hint=\u0026#34;请输入\u0026#34;--设置编辑框为空时的提示文字 --ImageView(图片视图) src=\u0026#34;a.png\u0026#34;--设置控件图片资源 scaleType=\u0026#34;fitXY\u0026#34;--设置图片缩放显示 ColorFilter=Color.BLUE--设置图片着色 --ListView(列表视图) Items={\u0026#34;item1\u0026#34;,\u0026#34;item2\u0026#34;,\u0026#34;item3\u0026#34;}--设置列表项目,但只能在布局表设置,动态添加项目请看Adapter View详解。 DividerHeight=0--设置无隔断线 fastScrollEnabled=true--设置是否显示快速滑块 layout_marginBottom--离某元素底边缘的距离 layout_marginLeft--离某元素左边缘的距离 layout_marginRight--离某元素右边缘的距离 layout_marginTop--离某元素上边缘的距离 gravity--属性是对该view 内容的限定．比如一个button 上面的text. 你可以设置该text 在view的靠左，靠右等位置．以button为例，gravity=\u0026#34;right\u0026#34;则button上面的文字靠右 layout_gravity--是用来设置该view相对与起父view 的位置．比如一个button 在linearlayout里，你想把该button放在靠左、靠右等位置就可以通过该属性设置．以button为例，layout_gravity=\u0026#34;right\u0026#34;则button靠右 scaleType --[[是控制图片如何resized/moved来匹对ImageView的size。ImageView.ScaleType / scaleType值的意义区别： CENTER /center 按图片的原来size居中显示，当图片长/宽超过View的长/宽，则截取图片的居中部分显示 CENTER_CROP / centerCrop 按比例扩大图片的size居中显示，使得图片长(宽)等于或大于View的长(宽) CENTER_INSIDE / centerInside 将图片的内容完整居中显示，通过按比例缩小或原来的size使得图片长/宽等于或小于View的长/宽 FIT_CENTER / fitCenter 把图片按比例扩大/缩小到View的宽度，居中显示 FIT_END / fitEnd 把图片按比例扩大/缩小到View的宽度，显示在View的下部分位置 FIT_START / fitStart 把图片按比例扩大/缩小到View的宽度，显示在View的上部分位置 FIT_XY / fitXY 把图片不按比例扩大/缩小到View的大小显示 MATRIX / matrix 用矩阵来绘制，动态缩小放大图片来显示。 ]] id--为控件指定相应的ID text--指定控件当中显示的文字 textSize--指定控件当中字体的大小 background--指定该控件所使用的背景色 width--指定控件的宽度 height--指定控件的高度 layout_width--指定Container组件的宽度 layout_height--指定Container组件的高度 layout_weight--View中很重要的属性，按比例划分空间 padding--指定控件的内边距，也就是说控件当中的内容 sigleLine--如果设置为真的话，则控件的内容在同一行中进行显示 关于侧滑 #  --侧滑布局是 DrawerLayout; --关闭侧滑 ID.closeDrawer(3) --打开侧滑 ID.openDrawer(3) 关于输入法影响布局的问题 #  --使弹出的输入法不影响布局 activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN); --使弹出的输入法影响布局 activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE); 布局效果实现 #   TextView设置字体样式 #  --首先要导入包 import \u0026#34;android.graphics.*\u0026#34; --设置中划线 控件id.getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG) --下划线 控件id.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG ) --加粗 控件id.getPaint().setFakeBoldText(true) --斜体 控件id.getPaint().setTextSkewX(0.2) --设置TypeFace import \u0026#34;android.graphics.Typeface\u0026#34; id.getPaint().setTypeface(字体) --字体可以为以下 Typeface.DEFAULT --默认字体 Typeface.DEFAULT_BOLD --加粗字体 Typeface.MONOSPACE --monospace字体 Typeface.SANS_SERIF --sans字体 Typeface.SERIF --serif字体 布局设置点击效果 #  --5.0或以上可以实现点击水波纹效果 --在布局加入： style=\u0026#34;?android:attr/buttonBarButtonStyle\u0026#34;; 图片着色 #  --代码中设置 ID.setColorFilter(0xffff0000) --布局表中设置 ColorFilter=\u0026#34;#ffff0000\u0026#34;； 沉浸状态栏 #  --这个需要系统SDK21以上才能用 if Build.VERSION.SDK_INT \u0026gt;= 21 then activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS).setStatusBarColor(0xff4285f4); end --这个需要系统SDK19以上才能用 if Build.VERSION.SDK_INT \u0026gt;= 19 then activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS); end Drawable着色 #  function ToColor(path,color) local aa=BitmapDrawable(loadbitmap(tostring(path))) aa.setColorFilter(PorterDuffColorFilter(color,PorterDuff.Mode.SRC_ATOP)) return aa end 设置TextView字体风格 #  import \u0026#34;android.graphics.Paint\u0026#34; --设置中划线 id.getPaint().setFlags(Paint. STRIKE_THRU_TEXT_FLAG) --设置下划线 id.getPaint().setFlags(Paint. UNDERLINE_TEXT_FLAG ) --设置加粗 id.getPaint().setFakeBoldText(true) --设置斜体 id.getPaint().setTextSkewX(0.2) --设置TypeFace import \u0026#34;android.graphics.Typeface\u0026#34; id.getPaint().setTypeface() --参数列表 Typeface.DEFAULT 默认字体 Typeface.DEFAULT_BOLD 加粗字体 Typeface.MONOSPACE monospace字体 Typeface.SANS_SERIF sans字体 Typeface.SERIF serif字体 修改对话框按钮颜色 #  function DialogButtonFilter(dialog,button,WidgetColor) if Build.VERSION.SDK_INT \u0026gt;= 21 then import \u0026#34;android.graphics.PorterDuffColorFilter\u0026#34; import \u0026#34;android.graphics.PorterDuff\u0026#34; if button==1 then dialog.getButton(dialog.BUTTON_POSITIVE).setTextColor(WidgetColor) elseif button==2 then dialog.getButton(dialog.BUTTON_NEGATIVE).setTextColor(WidgetColor) elseif button==3 then dialog.getButton(dialog.BUTTON_NEUTRAL).setTextColor(WidgetColor) end end end --第一个参数为对话框的变量 --第二个参数为1时，则修改POSITIVE按钮颜色,为二则修改NEGATIVE按钮颜色,为三则修改NEUTRAL按钮颜色 --第三个参数为要修改成的颜色 控件颜色修改 #  import \u0026#34;android.graphics.PorterDuffColorFilter\u0026#34; import \u0026#34;android.graphics.PorterDuff\u0026#34; --修改按钮颜色 button.getBackground().setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)) --修改编辑框颜色 edittext.getBackground().setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)); --修改Switch颜色 switch.ThumbDrawable.setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)); switch.TrackDrawable.setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)) --修改ProgressBar颜色 progressbar.IndeterminateDrawable.setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)) --修改SeekBar滑条颜色 seekbar.ProgressDrawable.setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)) --修改SeekBar滑块颜色 seekbar.Thumb.setColorFilter(PorterDuffColorFilter(0xFFFB7299,PorterDuff.Mode.SRC_ATOP)) 控件圆角 #  function CircleButton(view,InsideColor,radiu) import \u0026#34;android.graphics.drawable.GradientDrawable\u0026#34; drawable = GradientDrawable() drawable.setShape(GradientDrawable.RECTANGLE) drawable.setColor(InsideColor) drawable.setCornerRadii({radiu,radiu,radiu,radiu,radiu,radiu,radiu,radiu}); view.setBackgroundDrawable(drawable) end 角度=50 控件id=ed 控件颜色=0xFF09639C CircleButton(控件id,控件颜色,角度) 控件背景渐变动画 #  view=控件id color1 = 0xffFF8080; color2 = 0xff8080FF; color3 = 0xff80ffff; color4 = 0xff80ff80; import \u0026#34;android.animation.ObjectAnimator\u0026#34; import \u0026#34;android.animation.ArgbEvaluator\u0026#34; import \u0026#34;android.animation.ValueAnimator\u0026#34; import \u0026#34;android.graphics.Color\u0026#34; colorAnim = ObjectAnimator.ofInt(view,\u0026#34;backgroundColor\u0026#34;,{color1, color2, color3,color4}) colorAnim.setDuration(3000) colorAnim.setEvaluator(ArgbEvaluator()) colorAnim.setRepeatCount(ValueAnimator.INFINITE) colorAnim.setRepeatMode(ValueAnimator.REVERSE) colorAnim.start() dp、px、sp之间的转换 #  function dp2px(dpValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return dpValue * scale + 0.5 end function px2dp(pxValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return pxValue / scale + 0.5 end function px2sp(pxValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity; return pxValue / scale + 0.5 end function sp2px(spValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return spValue * scale + 0.5 end --调用例子 print(dp2px(64)) 设置activity背景颜色 #  function activity背景颜色(color) _window = activity.getWindow(); _window.setBackgroundDrawable(ColorDrawable(color)); _wlp = _window.getAttributes(); _wlp.gravity = Gravity.BOTTOM; _wlp.width = WindowManager.LayoutParams.MATCH_PARENT; _wlp.height = WindowManager.LayoutParams.MATCH_PARENT;--WRAP_CONTENT _window.setAttributes(_wlp); end --该函数需设置布局后使用 --调用例子 activity.setContentView(LinearLayout(activity)) activity背景颜色(0xff424242) 控件点击波纹背景 #  import \u0026#34;android.content.res.ColorStateList\u0026#34; function 波纹(id,lx,color) xpcall(function() ripple = activity.obtainStyledAttributes({android.R.attr.selectableItemBackgroundBorderless}).getResourceId(0,0) ripples = activity.obtainStyledAttributes({android.R.attr.selectableItemBackground}).getResourceId(0,0) for index,content in ipairs(id) do if lx==\u0026#34;圆\u0026#34; then content.setBackgroundDrawable(activity.Resources.getDrawable(ripple).setColor(ColorStateList(int[0].class{int{}},int{color}))) end if lx==\u0026#34;方\u0026#34; then content.setBackgroundDrawable(activity.Resources.getDrawable(ripples).setColor(ColorStateList(int[0].class{int{}},int{color}))) end end end,function(e)end) end --[[ 波纹(id,lx,color) id：控件id,table lx：波纹类型,圆或方,string color 波纹颜色,number 安卓5及以上可用。 该代码需要MD主题。 ]] --调用例子 layout={ LinearLayout; onClick=function()print(\u0026#34;MLua手册\u0026#34;)end; layout_width=\u0026#34;-1\u0026#34;; layout_height=\u0026#34;-1\u0026#34;; id=\u0026#34;lay\u0026#34;; } activity.setContentView(loadlayout(layout)) activity.setTheme(android.R.style.Theme_DeviceDefault_Light) 波纹({lay},\u0026#34;圆\u0026#34;,0x21000000) MLua手册底栏贝塞尔曲线 #   代码详情 ...  import \u0026#34;com.androlua.LuaDrawable\u0026#34; import \u0026#34;android.graphics.Path\u0026#34; import \u0026#34;android.graphics.Paint\u0026#34; function dp2px(dpValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return dpValue * scale + 0.5 end function px2dp(pxValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return pxValue / scale + 0.5 end function px2sp(pxValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity; return pxValue / scale + 0.5 end function sp2px(spValue) local scale = activity.getResources().getDisplayMetrics().scaledDensity return spValue * scale + 0.5 end layout={ RelativeLayout; layout_width=\u0026#34;-1\u0026#34;; background=backgroundc; layout_height=\u0026#34;-1\u0026#34;; { RelativeLayout, layout_width=\u0026#34;-1\u0026#34;, layout_height=\u0026#34;-1\u0026#34;, id=\u0026#34;llb\u0026#34;, gravity=\u0026#34;bottom\u0026#34;; { RelativeLayout, layout_width=\u0026#34;fill\u0026#34;, layout_height=\u0026#34;56dp\u0026#34;, clickable=\u0026#34;true\u0026#34;, id=\u0026#34;ll\u0026#34;, { LinearLayout; layout_width=\u0026#34;-1\u0026#34;; layout_height=\u0026#34;-1\u0026#34;; gravity=\u0026#34;left|center\u0026#34;; paddingLeft=\u0026#34;8dp\u0026#34;; paddingRight=\u0026#34;8dp\u0026#34;; { LinearLayout; layout_height=\u0026#34;-1\u0026#34;; layout_width=\u0026#34;-2\u0026#34;; layout_weight=\u0026#34;1\u0026#34;; }; { TextView; layout_height=\u0026#34;-1\u0026#34;; layout_width=\u0026#34;56dp\u0026#34;; layout_marginRight=\u0026#34;20dp\u0026#34;; layout_marginLeft=\u0026#34;8dp\u0026#34;; --background=grayc; }; }; }; }, { LinearLayout; layout_width=\u0026#34;-1\u0026#34;; layout_height=\u0026#34;-1\u0026#34;; orientation=\u0026#34;vertical\u0026#34;; gravity=\u0026#34;right|bottom\u0026#34;; { CardView; layout_width=\u0026#34;56dp\u0026#34;, layout_height=\u0026#34;56dp\u0026#34;, radius=\u0026#34;28dp\u0026#34;; layout_margin=\u0026#34;28dp\u0026#34;; CardBackgroundColor=\u0026#34;0xffffffff\u0026#34;; elevation=\u0026#34;6dp\u0026#34;; alpha=1; }; }; } activity.setContentView(loadlayout(layout)) myLuaDrawable=LuaDrawable(function(mCanvas,mPaint,mDrawable) mPaint.setColor(0xffffffff) mPaint.setAntiAlias(true) mPaint.setStrokeWidth(20) mPaint.setStyle(Paint.Style.FILL) mPaint.setStrokeCap(Paint.Cap.ROUND) w=mDrawable.getBounds().right h=mDrawable.getBounds().bottom mPath=Path() mPath.moveTo(w, h); mPath.lineTo(0, h); mPath.lineTo(0, h-dp2px(56)); mPath.lineTo(w-dp2px(56+16+16+8), h-dp2px(56)); mPath.rQuadTo(dp2px(8), dp2px(0),dp2px(8+1), dp2px(8)) mPath.rCubicTo(dp2px(8-1), dp2px(28+4),dp2px(56-1), dp2px(28+4),dp2px(56+8-2), dp2px(0)) mPath.rQuadTo(dp2px(1), dp2px(-8),dp2px(8+1), dp2px(-8)) mPath.rLineTo(w, 0); mCanvas.drawColor(0x00000000) mCanvas.drawPath(mPath, mPaint); mPath.close(); end) ll.background=myLuaDrawable myLuaDrawable=LuaDrawable(function(mCanvas,mPaint,mDrawable) mPaint.setColor(0x21000000) mPaint.setAntiAlias(true) mPaint.setStrokeWidth(dp2px(4)) mPaint.setStyle(Paint.Style.FILL) mPaint.setStrokeCap(Paint.Cap.ROUND) w=mDrawable.getBounds().right h=mDrawable.getBounds().bottom mPath=Path() mPath.moveTo(w, h); mPath.lineTo(0, h); mPath.lineTo(0, h-dp2px(56)); mPath.lineTo(w-dp2px(56+16+16+8), h-dp2px(56)); mPath.rQuadTo(dp2px(8), dp2px(0),dp2px(8+1), dp2px(8)) mPath.rCubicTo(dp2px(8-1), dp2px(28+4),dp2px(56-1), dp2px(28+4),dp2px(56+8-2), dp2px(0)) mPath.rQuadTo(dp2px(1), dp2px(-8),dp2px(8+1), dp2px(-8)) mPath.rLineTo(w, 0); mCanvas.drawColor(0x00000000) mPaint.setShadowLayer(dp2px(1), 0, dp2px(-1), 0x70FFFFFF); mCanvas.drawPath(mPath, mPaint); mPath.close(); end) llb.background=myLuaDrawable     带颜色的字体 #  import \u0026#34;android.text.SpannableString\u0026#34; import \u0026#34;android.text.style.ForegroundColorSpan\u0026#34; import \u0026#34;android.text.Spannable\u0026#34; function 颜色字体(t,c) local sp = SpannableString(t) sp.setSpan(ForegroundColorSpan(c),0,#sp,Spannable.SPAN_EXCLUSIVE_INCLUSIVE) return sp end --调用示例 activity.setTitle(颜色字体(\u0026#34;MLua手册 qwq\u0026#34;,0xff2196f3))--设置标题为0xff2196f3颜色的 MLua手册 qwq 适配异形屏的全屏 #  function 全屏() window = activity.getWindow(); window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN|View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN); window.addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN) xpcall(function() lp = window.getAttributes(); lp.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES; window.setAttributes(lp); end, function(e) end) end --使用该代码可能需要隐藏ActionBar --调用示例 全屏() 图片处理 #   高斯模糊 #  import \u0026#34;android.renderscript.Element\u0026#34; import \u0026#34;android.renderscript.Allocation\u0026#34; import \u0026#34;android.renderscript.RenderScript\u0026#34; import \u0026#34;android.graphics.Bitmap\u0026#34; import \u0026#34;android.renderscript.ScriptIntrinsicBlur\u0026#34; import \u0026#34;android.graphics.Matrix\u0026#34; function 高斯模糊(id,tp,radius1,radius2) function blur( context, bitmap, blurRadius) renderScript = RenderScript.create(context); blurScript = ScriptIntrinsicBlur.create(renderScript, Element.U8_4(renderScript)); inAllocation = Allocation.createFromBitmap(renderScript, bitmap); outputBitmap = bitmap; outAllocation = Allocation.createTyped(renderScript, inAllocation.getType()); blurScript.setRadius(blurRadius); blurScript.setInput(inAllocation); blurScript.forEach(outAllocation); outAllocation.copyTo(outputBitmap); inAllocation.destroy(); outAllocation.destroy(); renderScript.destroy(); blurScript.destroy(); return outputBitmap; end function zoomBitmap(bitmap,scale) w = bitmap.getWidth(); h = bitmap.getHeight(); matrix = Matrix(); matrix.postScale(scale, scale); bitmap = Bitmap.createBitmap(bitmap, 0, 0, w, h, matrix, true); return bitmap; end function blurAndZoom(context,bitmap,blurRadius,scale) return zoomBitmap(blur(context,zoomBitmap(bitmap, 1 / scale), blurRadius), scale); end id.setImageBitmap(blurAndZoom(activity,tp,radius1,radius2)) end --[[ 高斯模糊(id,tp,radius1,radius2) radius1 范围：1-25 radius2 范围：1-？(据图片而定太大报错) ]] --调用例子 img=ImageView(activity) activity.setContentView(img) 高斯模糊(img,loadbitmap(\u0026#34;https://image.uisdc.com/wp-content/uploads/2019/06/uisdc-banner-20190614-2.jpg\u0026#34;),4,2) 圆形图片 #  function 圆形图片(bitmap) import \u0026#34;android.graphics.PorterDuffXfermode\u0026#34; import \u0026#34;android.graphics.Paint\u0026#34; import \u0026#34;android.graphics.RectF\u0026#34; import \u0026#34;android.graphics.Bitmap\u0026#34; import \u0026#34;android.graphics.PorterDuff$Mode\u0026#34; import \u0026#34;android.graphics.Rect\u0026#34; import \u0026#34;android.graphics.Canvas\u0026#34; import \u0026#34;android.util.Config\u0026#34; width = bitmap.getWidth() output = Bitmap.createBitmap(width, bitmap.getHeight(),Bitmap.Config.ARGB_8888) canvas = Canvas(output); color = 0xff424242; paint = Paint() rect = Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()); rectF = RectF(rect); paint.setAntiAlias(true); canvas.drawARGB(0, 0, 0, 0); paint.setColor(color); canvas.drawRoundRect(rectF, width/2, bitmap.getHeight()/2, paint); paint.setXfermode(PorterDuffXfermode(Mode.SRC_IN)); canvas.drawBitmap(bitmap, rect, rect, paint); return output; end --调用示例 img=ImageView(activity) activity.setContentView(img) img.setImageBitmap(圆形图片(loadbitmap(\u0026#34;https://api.yimian.xyz/img/?path=head/img_19_212x210_96_acg-head_normal.png\u0026#34;))) 获取控件图片 #  import \u0026#34;android.graphics.Bitmap\u0026#34; function 获取控件图片(view) local linearParams = view.getLayoutParams() local vw=linearParams.width local linearParams = view.getLayoutParams() local vh=linearParams.height view.setDrawingCacheEnabled(true) view.layout(0,0,vw,vh) return Bitmap.createBitmap(view.getDrawingCache()) end --调用示例 layout={ LinearLayout, layout_width=\u0026#34;-1\u0026#34;, layout_height=\u0026#34;-1\u0026#34;, orientation=\u0026#34;vertical\u0026#34;; { TextView, textSize=\u0026#34;14sp\u0026#34;; layout_width=\u0026#34;56dp\u0026#34;, layout_height=\u0026#34;42dp\u0026#34;, text=\u0026#34;TextView1\u0026#34;, textColor=\u0026#34;#FFFFFFFF\u0026#34;; background=\u0026#34;#212121\u0026#34;, id=\u0026#34;tv\u0026#34;; }, { ImageView, layout_width=\u0026#34;-1\u0026#34;, layout_height=\u0026#34;-1\u0026#34;, id=\u0026#34;img\u0026#34;; }, } --设置布局 activity.setContentView(loadlayout(layout)) --获取tv的图片设置给img img.setImageBitmap(获取控件图片(tv)) 图片圆角 #  function GetRoundedCornerBitmap(bitmap,roundPx) import \u0026#34;android.graphics.PorterDuffXfermode\u0026#34; import \u0026#34;android.graphics.Paint\u0026#34; import \u0026#34;android.graphics.RectF\u0026#34; import \u0026#34;android.graphics.Bitmap\u0026#34; import \u0026#34;android.graphics.PorterDuff$Mode\u0026#34; import \u0026#34;android.graphics.Rect\u0026#34; import \u0026#34;android.graphics.Canvas\u0026#34; import \u0026#34;android.util.Config\u0026#34; width = bitmap.getWidth() output = Bitmap.createBitmap(width, width,Bitmap.Config.ARGB_8888) canvas = Canvas(output); color = 0xff424242; paint = Paint() rect = Rect(0, 0, bitmap.getWidth(), bitmap.getHeight()); rectF = RectF(rect); paint.setAntiAlias(true); canvas.drawARGB(0, 0, 0, 0); paint.setColor(color); canvas.drawRoundRect(rectF, roundPx, roundPx, paint); paint.setXfermode(PorterDuffXfermode(Mode.SRC_IN)); canvas.drawBitmap(bitmap, rect, rect, paint); return output; end import \u0026#34;android.graphics.drawable.BitmapDrawable\u0026#34; 圆角弧度=50 bitmap=loadbitmap(picturePath) RoundPic=GetRoundedCornerBitmap(bitmap) 缩放图片 #  function rotateToFit(bm,degrees) import \u0026#34;android.graphics.Matrix\u0026#34; import \u0026#34;android.graphics.Bitmap\u0026#34; width = bm.getWidth() height = bm.getHeight() matrix = Matrix() matrix.postRotate(degrees) bmResult = Bitmap.createBitmap(bm, 0, 0, width, height, matrix, true) return bmResult end bm=loadbitmap(图片路径) 缩放级别=2 rotateToFit(bm,degrees) --非原创 自定义布局对话框 #  local dl=AlertDialog.Builder(activity) .setTitle(\u0026#34;自定义布局对话框\u0026#34;) .setView(loadlayout(layout)) dl.show() "},{"id":13,"href":"/docs/04/0406system/","title":"04-06 系统调用","section":"04-00 MLUA教程","content":"系统 #   From MLUA  申请root权限 #  --shell命令的方法 os.execute(\u0026#34;su\u0026#34;) 分享文字 #  import \u0026#34;android.content.*\u0026#34; text=\u0026#34;分享的内容\u0026#34; intent=Intent(Intent.ACTION_SEND); intent.setType(\u0026#34;text/plain\u0026#34;); intent.putExtra(Intent.EXTRA_SUBJECT, \u0026#34;分享\u0026#34;); intent.putExtra(Intent.EXTRA_TEXT, text); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); activity.startActivity(Intent.createChooser(intent,\u0026#34;分享到:\u0026#34;)); 设置横屏竖屏 #  --横屏 activity.setRequestedOrientation(0); --竖屏 activity.setRequestedOrientation(1); Shell执行 #  function exec(cmd) local p=io.popen(string.format(\u0026#39;%s\u0026#39;,cmd)) local s=p:read(\u0026#34;*a\u0026#34;) p:close() return s end print(exec(\u0026#34;echo ....\u0026#34;)) 部分常用命令: --删除文件或文件夹 rm -r /路径 --复制文件或文件夹 cp -r inpath outpath --移动文件或文件夹 mv -r inpath outpath --挂载系统目录 mount -o remount,rw path --修改系统文件权限 chmod 755 /system/build.prop --重启 reboot� --关机 reboot -p --重启至recovery reboot recovery 震动 #  import \u0026#34;android.content.Context\u0026#34; --导入包 vibrator = activity.getSystemService(Context.VIBRATOR_SERVICE) vibrator.vibrate( long{100,800} ,-1) --{等待时间,振动时间,等待时间,振动时间,…} --{0,1000,500,1000,500,1000} --别忘了申明权限 发送短信 #  --后台发送短信 require \u0026#34;import\u0026#34; import \u0026#34;android.telephony.*\u0026#34; SmsManager.getDefault().sendTextMessage(tostring(号码), nil, tostring(内容), nil, nil) --调用系统发送短信 import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; uri = Uri.parse(\u0026#34;smsto:\u0026#34;..号码) intent = Intent(Intent.ACTION_SENDTO, uri) intent.putExtra(\u0026#34;sms_body\u0026#34;,内容) intent.setAction(\u0026#34;android.intent.action.VIEW\u0026#34;) activity.startActivity(intent) 分享 #  --分享文件 function Sharing(path) import \u0026#34;android.webkit.MimeTypeMap\u0026#34; import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;java.io.File\u0026#34; FileName=tostring(File(path).Name) ExtensionName=FileName:match(\u0026#34;%.(.+)\u0026#34;) Mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(ExtensionName) intent = Intent(); intent.setAction(Intent.ACTION_SEND); intent.setType(Mime); file = File(path); uri = Uri.fromFile(file); intent.putExtra(Intent.EXTRA_STREAM,uri); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); activity.startActivity(Intent.createChooser(intent, \u0026#34;分享到:\u0026#34;)); end --分享文字 text=\u0026#34;分享的内容\u0026#34; intent=Intent(Intent.ACTION_SEND); intent.setType(\u0026#34;text/plain\u0026#34;); intent.putExtra(Intent.EXTRA_SUBJECT, \u0026#34;分享\u0026#34;); intent.putExtra(Intent.EXTRA_TEXT, text); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); activity.startActivity(Intent.createChooser(intent,\u0026#34;分享到:\u0026#34;)); 传感器 #  传感器 = activity.getSystemService(Context.SENSOR_SERVICE) local 加速度传感器 = 传感器.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) x轴 = event.values[0] y轴 = event.values[1] z轴 = event.values[2] end,nil}), 加速度传感器, SensorManager.SENSOR_DELAY_NORMAL) local 光线传感器 = 传感器.getDefaultSensor(Sensor.TYPE_LIGHT) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 光线 = event.values[0] end,nil}), 光线传感器, SensorManager.SENSOR_DELAY_NORMAL) local 距离传感器 = 传感器.getDefaultSensor(Sensor.TYPE_PROXIMITY) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 距离 = event.values[0] end,nil}), 距离传感器, SensorManager.SENSOR_DELAY_NORMAL) local 磁场传感器 = 传感器.getDefaultSensor(Sensor.TYPE_ORIENTATION) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 磁场 = event.values[0] end,nil}), 磁场传感器, SensorManager.SENSOR_DELAY_NORMAL) local 温度传感器 = 传感器.getDefaultSensor(Sensor.TYPE_TEMPERATURE) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 温度 = event.values[0] end,nil}), 温度传感器, SensorManager.SENSOR_DELAY_NORMAL) local 陀螺仪传感器 = 传感器.getDefaultSensor(Sensor.TYPE_GYROSCOPE) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 陀螺仪 = event.values[0] end,nil}), 陀螺仪传感器, SensorManager.SENSOR_DELAY_NORMAL) local 重力传感器 = 传感器.getDefaultSensor(Sensor.TYPE_GRAVITY) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 重力 = event.values[0] end,nil}), 重力传感器, SensorManager.SENSOR_DELAY_NORMAL) local 压力传感器 = 传感器.getDefaultSensor(Sensor.TYPE_PRESSURE) 传感器.registerListener(SensorEventListener({ onSensorChanged=function(event) 压力 = event.values[0] end,nil}), 压力传感器, SensorManager.SENSOR_DELAY_NORMAL) 使用系统TTS播报语音 #  import \u0026#34;android.speech.tts.*\u0026#34; mTextSpeech = TextToSpeech(activity, TextToSpeech.OnInitListener{ onInit=function(status) --如果装载TTS成功 if (status == TextToSpeech.SUCCESS) result = mTextSpeech.setLanguage(Locale.CHINESE); --[[LANG_MISSING_DATA--\u0026gt;语言的数据丢失 LANG_NOT_SUPPORTED--\u0026gt;语言不支持]] if (result == TextToSpeech.LANG_MISSING_DATA or result == TextToSpeech.LANG_NOT_SUPPORTED) --不支持中文 print(\u0026#34;您的手机不支持中文语音播报功能。\u0026#34;); result = mTextSpeech.setLanguage(Locale.ENGLISH); if (result == TextToSpeech.LANG_MISSING_DATA or result == TextToSpeech.LANG_NOT_SUPPORTED) --不支持中文和英文 print(\u0026#34;您的手机不支持语音播报功能。\u0026#34;); else --不支持中文但支持英文 --语调,1.0默认 mTextSpeech.setPitch(1); --语速,1.0默认 mTextSpeech.setSpeechRate(1); mTextSpeech.speak(\u0026#34;hello,MLua Manual.Hello,World!\u0026#34;, TextToSpeech.QUEUE_FLUSH, nil); end else --支持中文 --语调,1.0默认 mTextSpeech.setPitch(1); --语速,1.0默认 mTextSpeech.setSpeechRate(1); mTextSpeech.speak(\u0026#34;你好，MLua手册。你好，世界！\u0026#34;, TextToSpeech.QUEUE_FLUSH, nil); end end end })  返回桌面 #  import \u0026#34;android.content.Intent\u0026#34; home=Intent(Intent.ACTION_MAIN); home.addCategory(Intent.CATEGORY_HOME); activity.startActivity(home);  模拟按键 #  function sendKeyCode(keyCode) xpcall(function() Runtime.getRuntime().exec(\u0026#34;input keyevent \u0026#34; .. keyCode) end,function(e) print(e) end) end sendKeyCode(KeyEvent.KEYCODE_VOLUME_DOWN)--音量-   参数 ...  --[[ KEYCODE_0 \u0026#39;0\u0026#39; key. 7 KEYCODE_1 \u0026#39;1\u0026#39; key. 8 KEYCODE_2 \u0026#39;2\u0026#39; key. 9 KEYCODE_3 \u0026#39;3\u0026#39; key. 10 KEYCODE_4 \u0026#39;4\u0026#39; key. 11 KEYCODE_5 \u0026#39;5\u0026#39; key. 12 KEYCODE_6 \u0026#39;6\u0026#39; key. 13 KEYCODE_7 \u0026#39;7\u0026#39; key. 14 KEYCODE_8 \u0026#39;8\u0026#39; key. 15 KEYCODE_9 \u0026#39;9\u0026#39; key. 16 KEYCODE_A \u0026#39;A\u0026#39; key. 29 KEYCODE_B \u0026#39;B\u0026#39; key. 30 KEYCODE_C \u0026#39;C\u0026#39; key. 31 KEYCODE_D \u0026#39;D\u0026#39; key. 32 KEYCODE_E \u0026#39;E\u0026#39; key. 33 KEYCODE_F \u0026#39;F\u0026#39; key. 34 KEYCODE_G \u0026#39;G\u0026#39; key. 35 KEYCODE_H \u0026#39;H\u0026#39; key. 36 KEYCODE_I \u0026#39;I\u0026#39; key. 37 KEYCODE_J \u0026#39;J\u0026#39; key. 38 KEYCODE_K \u0026#39;K\u0026#39; key. 39 KEYCODE_L \u0026#39;L\u0026#39; key. 40 KEYCODE_M \u0026#39;M\u0026#39; key. 41 KEYCODE_N \u0026#39;N\u0026#39; key. 42 KEYCODE_O \u0026#39;O\u0026#39; key. 43 KEYCODE_P \u0026#39;P\u0026#39; key. 44 KEYCODE_Q \u0026#39;Q\u0026#39; key. 45 KEYCODE_R \u0026#39;R\u0026#39; key. 46 KEYCODE_S \u0026#39;S\u0026#39; key. 47 KEYCODE_T \u0026#39;T\u0026#39; key. 48 KEYCODE_U \u0026#39;U\u0026#39; key. 49 KEYCODE_V \u0026#39;V\u0026#39; key. 50 KEYCODE_W \u0026#39;W\u0026#39; key. 51 KEYCODE_X \u0026#39;X\u0026#39; key. 52 KEYCODE_Y \u0026#39;Y\u0026#39; key. 53 KEYCODE_Z \u0026#39;Z\u0026#39; key. 54 META_ALT_LEFT_ON This mask is used to check whether the left ALT meta key is pressed. 16 META_ALT_MASK This mask is a combination of META_ALT_ON, META_ALT_LEFT_ON and META_ALT_RIGHT_ON. 50 META_ALT_ON This mask is used to check whether one of the ALT meta keys is pressed. 2 META_ALT_RIGHT_ON This mask is used to check whether the right the ALT meta key is pressed. 32 META_CAPS_LOCK_ON This mask is used to check whether the CAPS LOCK meta key is on. 1048576 META_CTRL_LEFT_ON This mask is used to check whether the left CTRL meta key is pressed. 8192 META_CTRL_MASK This mask is a combination of META_CTRL_ON, META_CTRL_LEFT_ON and META_CTRL_RIGHT_ON. 28672 META_CTRL_ON This mask is used to check whether one of the CTRL meta keys is pressed. 4096 META_CTRL_RIGHT_ON This mask is used to check whether the right CTRL meta key is pressed. 16384 META_FUNCTION_ON This mask is used to check whether the FUNCTION meta key is pressed. 8 META_META_LEFT_ON This mask is used to check whether the left META meta key is pressed. 131072 META_META_MASK This mask is a combination of META_META_ON, META_META_LEFT_ON and META_META_RIGHT_ON. 458752 META_META_ON This mask is used to check whether one of the META meta keys is pressed. 65536 META_META_RIGHT_ON This mask is used to check whether the right META meta key is pressed. 262144 META_NUM_LOCK_ON This mask is used to check whether the NUM LOCK meta key is on. 2097152 META_SCROLL_LOCK_ON This mask is used to check whether the SCROLL LOCK meta key is on. 4194304 META_SHIFT_LEFT_ON This mask is used to check whether the left SHIFT meta key is pressed. 64 META_SHIFT_MASK This mask is a combination of META_SHIFT_ON, META_SHIFT_LEFT_ON and META_SHIFT_RIGHT_ON. 193 META_SHIFT_ON This mask is used to check whether one of the SHIFT meta keys is pressed. 1 META_SHIFT_RIGHT_ON This mask is used to check whether the right SHIFT meta key is pressed. 128 META_SYM_ON This mask is used to check whether the SYM meta key is pressed. 4 KEYCODE_APOSTROPHE \u0026#39;\u0026#39;\u0026#39; key. 75 KEYCODE_AT \u0026#39;@\u0026#39; key. 77 KEYCODE_BACKSLASH \u0026#39;\\\u0026#39; key. 73 KEYCODE_COMMA \u0026#39;,\u0026#39; key. 55 KEYCODE_EQUALS \u0026#39;=\u0026#39; key. 70 KEYCODE_GRAVE \u0026#39;`\u0026#39; key. 68 KEYCODE_LEFT_BRACKET \u0026#39;[\u0026#39; key. 71 KEYCODE_MINUS \u0026#39;-\u0026#39; key. 69 KEYCODE_PERIOD \u0026#39;.\u0026#39; key. 56 KEYCODE_PLUS \u0026#39;+\u0026#39; key. 81 KEYCODE_POUND \u0026#39;#\u0026#39; key. 18 KEYCODE_RIGHT_BRACKET \u0026#39;]\u0026#39; key. 72 KEYCODE_SEMICOLON \u0026#39;;\u0026#39; key. 74 KEYCODE_SLASH \u0026#39;/\u0026#39; key. 76 KEYCODE_STAR \u0026#39;*\u0026#39; key. 17 KEYCODE_SPACE Space key. 62 KEYCODE_TAB Tab key. 61 KEYCODE_ENTER Enter key. 66 KEYCODE_ESCAPE Escape key. 111 KEYCODE_CAPS_LOCK Caps Lock key. 115 KEYCODE_CLEAR Clear key. 28 KEYCODE_PAGE_DOWN Page Down key. 93 KEYCODE_PAGE_UP Page Up key. 92 KEYCODE_SCROLL_LOCK Scroll Lock key. 116 KEYCODE_MOVE_END End. 123 KEYCODE_MOVE_HOME Home. 122 KEYCODE_INSERT Insert key. 124 KEYCODE_SHIFT_LEFT Left Shift. 59 KEYCODE_SHIFT_RIGHT Right Shift. 60 KEYCODE_F1 F1 key. 131 KEYCODE_F2 F2 key. 132 KEYCODE_F3 F3 key. 133 KEYCODE_F4 F4 key. 134 KEYCODE_F5 F5 key. 135 KEYCODE_F6 F6 key. 136 KEYCODE_F7 F7 key. 137 KEYCODE_F8 F8 key. 138 KEYCODE_F9 F9 key. 139 KEYCODE_F10 F10 key. 140 KEYCODE_F11 F11 key. 141 KEYCODE_F12 F12 key. 142 KEYCODE_BACK Back key. 4 KEYCODE_CALL Call key. 5 KEYCODE_ENDCALL End Call key. 6 KEYCODE_CAMERA Camera key. 27 KEYCODE_FOCUS Camera Focus key. 80 KEYCODE_VOLUME_UP Volume Up key. 24 KEYCODE_VOLUME_DOWN Volume Down key. 25 KEYCODE_VOLUME_MUTE Volume Mute key. 164 KEYCODE_MENU Menu key. 82 KEYCODE_HOME Home key. 3 KEYCODE_POWER Power key. 26 KEYCODE_SEARCH Search key. 84 KEYCODE_NOTIFICATION Notification key. 83 KEYCODE_NUM Number modifier key. 78 KEYCODE_SYM Symbol modifier key. 63 KEYCODE_SETTINGS Settings key. 176 KEYCODE_DEL Backspace key. Deletes characters before the insertion point, unlike KEYCODE_FORWARD_DEL. 67 KEYCODE_FORWARD_DEL Forward Delete key. Deletes characters ahead of the insertion point, unlike KEYCODE_DEL. 112 KEYCODE_NUMPAD_0 Numeric keypad \u0026#39;0\u0026#39; key. 144 KEYCODE_NUMPAD_1 Numeric keypad \u0026#39;1\u0026#39; key. 145 KEYCODE_NUMPAD_2 Numeric keypad \u0026#39;2\u0026#39; key. 146 KEYCODE_NUMPAD_3 Numeric keypad \u0026#39;3\u0026#39; key. 147 KEYCODE_NUMPAD_4 Numeric keypad \u0026#39;4\u0026#39; key. 148 KEYCODE_NUMPAD_5 Numeric keypad \u0026#39;5\u0026#39; key. 149 KEYCODE_NUMPAD_6 Numeric keypad \u0026#39;6\u0026#39; key. 150 KEYCODE_NUMPAD_7 Numeric keypad \u0026#39;7\u0026#39; key. 151 KEYCODE_NUMPAD_8 Numeric keypad \u0026#39;8\u0026#39; key. 152 KEYCODE_NUMPAD_9 Numeric keypad \u0026#39;9\u0026#39; key. 153 KEYCODE_NUMPAD_ADD Numeric keypad \u0026#39;+\u0026#39; key 157 KEYCODE_NUMPAD_COMMA Numeric keypad \u0026#39;,\u0026#39; key 159 KEYCODE_NUMPAD_DIVIDE Numeric keypad \u0026#39;/\u0026#39; key 154 KEYCODE_NUMPAD_DOT Numeric keypad \u0026#39;.\u0026#39; key 158 KEYCODE_NUMPAD_EQUALS Numeric keypad \u0026#39;=\u0026#39; key. 161 KEYCODE_NUMPAD_LEFT_PAREN Numeric keypad \u0026#39;(\u0026#39; key. 162 KEYCODE_NUMPAD_MULTIPLY Numeric keypad \u0026#39;*\u0026#39; key 155 KEYCODE_NUMPAD_RIGHT_PAREN Numeric keypad \u0026#39;)\u0026#39; key. 163 KEYCODE_NUMPAD_SUBTRACT Numeric keypad \u0026#39;-\u0026#39; key 156 KEYCODE_NUMPAD_ENTER Numeric keypad Enter key. 160 KEYCODE_NUM_LOCK Numeric keypad Num Lock key. 143 KEYCODE_MEDIA_FAST_FORWARD Fast Forward media key. 90 KEYCODE_MEDIA_NEXT Play Next media key. 87 KEYCODE_MEDIA_PAUSE Pause media key. 127 KEYCODE_MEDIA_PLAY Play media key. 126 KEYCODE_MEDIA_PLAY_PAUSE Play/Pause media key. 85 KEYCODE_MEDIA_PREVIOUS Play Previous media key. 88 KEYCODE_MEDIA_RECORD Record media key. 130 KEYCODE_MEDIA_REWIND Rewind media key. 89 KEYCODE_MEDIA_STOP Stop media key. 86 ]]      权限 #  判断有无悬浮窗权限 #  import \u0026#34;android.provider.Settings\u0026#34; function 判断悬浮窗权限() if (Build.VERSION.SDK_INT \u0026gt;= 23 and not Settings.canDrawOverlays(this)) then return false elseif Build.VERSION.SDK_INT \u0026lt; 23 then return nil else return true end end Build.VERSION.SDK_INT \u0026gt;= 23 是因为安卓6.0以下没有统一判断悬浮窗权限的方法\n当安卓版本大于6.0且有悬浮窗权限时返回true，当安卓版本大于6.0且无悬浮窗权限时返回false，当安卓版本小于6.0时无法判断返回nil\n--调用例子 print(判断悬浮窗权限()) 获取悬浮窗权限 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.provider.Settings\u0026#34; function 获取悬浮窗权限() intent = Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION); intent.setData(Uri.parse(\u0026#34;package:\u0026#34; .. activity.getPackageName())); activity.startActivityForResult(intent, 100); end --调用示例 获取悬浮窗权限()  应用交互 #  调用其它程序打开文件 #  function OpenFile(path) import \u0026#34;android.webkit.MimeTypeMap\u0026#34; import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;java.io.File\u0026#34; FileName=tostring(File(path).Name) ExtensionName=FileName:match(\u0026#34;%.(.+)\u0026#34;) Mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(ExtensionName) if Mime then intent = Intent(); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); intent.setAction(Intent.ACTION_VIEW); intent.setDataAndType(Uri.fromFile(File(path)), Mime); activity.startActivity(intent); else Toastc(\u0026#34;找不到可以用来打开此文件的程序\u0026#34;) end end QQ名片 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; function QQ群(h) url=\u0026#34;mqqapi://card/show_pslcard?src_type=internal\u0026amp;version=1\u0026amp;uin=\u0026#34;..h..\u0026#34;\u0026amp;card_type=group\u0026amp;source=qrcode\u0026#34; activity.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url))) end function QQ(h) url=\u0026#34;mqqapi://card/show_pslcard?src_type=internal\u0026amp;source=sharecard\u0026amp;version=1\u0026amp;uin=\u0026#34;..h activity.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(url))) end --调用 QQ群(\u0026#34;686976850\u0026#34;) QQ(\u0026#34;1773798610\u0026#34;) 浏览器 #  搜索关键字 #  --搜索关键字 import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.app.SearchManager\u0026#34; intent = Intent() intent.setAction(Intent.ACTION_WEB_SEARCH) intent.putExtra(SearchManager.QUERY,\u0026#34;Alua开发手册\u0026#34;) activity.startActivity(intent) 打开网页 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; url=\u0026#34;http://www.androlua.cn\u0026#34; viewIntent = Intent(\u0026#34;android.intent.action.VIEW\u0026#34;,Uri.parse(url)) activity.startActivity(viewIntent) 打开其它程序 #  packageName=程序包名 import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.content.pm.PackageManager\u0026#34; manager = activity.getPackageManager() open = manager.getLaunchIntentForPackage(packageName) this.startActivity(open) 安装其他程序 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; intent = Intent(Intent.ACTION_VIEW) 安装包路径=\u0026#34;/sdcard/a.apk\u0026#34; intent.setDataAndType(Uri.parse(\u0026#34;file://\u0026#34;..安装包路径), \u0026#34;application/vnd.android.package-archive\u0026#34;) intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) activity.startActivity(intent) 卸载其他程序 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; 包名=\u0026#34;com.huluxia.gametools\u0026#34; uri = Uri.parse(\u0026#34;package:\u0026#34;..包名) intent = Intent(Intent.ACTION_DELETE,uri) activity.startActivity(intent)  系统交互 #  播放Mp4 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; intent = Intent(Intent.ACTION_VIEW) uri = Uri.parse(\u0026#34;file:///sdcard/a.mp4\u0026#34;) intent.setDataAndType(uri, \u0026#34;video/mp4\u0026#34;) activity.startActivity(intent) 播放Mp3 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; intent = Intent(Intent.ACTION_VIEW) uri = Uri.parse(\u0026#34;file:///sdcard/song.mp3\u0026#34;) intent.setDataAndType(uri, \u0026#34;audio/mp3\u0026#34;) this.startActivity(intent) 搜索应用 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; intent = Intent(\u0026#34;android.intent.action.VIEW\u0026#34;) intent .setData(Uri.parse( \u0026#34;market://details?id=\u0026#34;..activity.getPackageName())) this.startActivity(intent) 调用系统设置 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.provider.Settings\u0026#34; intent = Intent(Settings.ACTION_BLUETOOTH_SETTINGS) this.startActivity(intent) --[[ 原代码： intent = Intent(android.provider.Settings.ACTION_SETTINGS) this.startActivity(intent) 19-10-03修正错误]]   字段补充 ...  设置 ACTION_SETTINGS 系统设置 CTION_APN_SETTINGS APN设置 ACTION_LOCATION_SOURCE_SETTINGS 位置和访问信息 ACTION_WIRELESS_SETTINGS 网络设置 ACTION_AIRPLANE_MODE_SETTINGS 无线和网络热点设置 ACTION_SECURITY_SETTINGS 位置和安全设置 ACTION_WIFI_SETTINGS 无线网WIFI设置 ACTION_WIFI_IP_SETTINGS 无线网IP设置 ACTION_BLUETOOTH_SETTINGS 蓝牙设置 ACTION_DATE_SETTINGS 时间和日期设置 ACTION_SOUND_SETTINGS 声音设置 ACTION_DISPLAY_SETTINGS 显示设置——字体大小等 ACTION_LOCALE_SETTINGS 语言设置 ACTION_INPUT_METHOD_SETTINGS 输入法设置 ACTION_USER_DICTIONARY_SETTINGS 用户词典 ACTION_APPLICATION_SETTINGS 应用程序设置 ACTION_APPLICATION_DEVELOPMENT_SETTINGS 应用程序设置 ACTION_QUICK_LAUNCH_SETTINGS 快速启动设置 ACTION_MANAGE_APPLICATIONS_SETTINGS 已下载（安装）软件列表 ACTION_SYNC_SETTINGS 应用程序数据同步设置 ACTION_NETWORK_OPERATOR_SETTINGS 可用网络搜索 ACTION_DATA_ROAMING_SETTINGS 移动网络设置 ACTION_INTERNAL_STORAGE_SETTINGS 手机存储设置     调用系统打开文件 #  function OpenFile(path) import \u0026#34;android.webkit.MimeTypeMap\u0026#34; import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;java.io.File\u0026#34; FileName=tostring(File(path).Name) ExtensionName=FileName:match(\u0026#34;%.(.+)\u0026#34;) Mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(ExtensionName) if Mime then intent = Intent() intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK) intent.setAction(Intent.ACTION_VIEW); intent.setDataAndType(Uri.fromFile(File(path)), Mime); activity.startActivity(intent) return true else return false end end OpenFile(文件路径) 调用图库 #  import \u0026#34;android.content.Intent\u0026#34; local intent= Intent(Intent.ACTION_PICK) intent.setType(\u0026#34;image/*\u0026#34;) this.startActivityForResult(intent, 1) ------- --回调 function onActivityResult(requestCode,resultCode,intent) if intent then local cursor =this.getContentResolver ().query(intent.getData(), nil, nil, nil, nil) cursor.moveToFirst() import \u0026#34;android.provider.MediaStore\u0026#34; local idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA) fileSrc = cursor.getString(idx) bit=nil --fileSrc回调路径路径 import \u0026#34;android.graphics.BitmapFactory\u0026#34; bit =BitmapFactory.decodeFile(fileSrc) -- iv.setImageBitmap(bit) end end--nirenr 调用文件管理器选择文件 #  function ChooseFile() import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;java.net.URLDecoder\u0026#34; import \u0026#34;java.io.File\u0026#34; intent = Intent(Intent.ACTION_GET_CONTENT) intent.setType(\u0026#34;*/\u0026#34;); intent.addCategory(Intent.CATEGORY_OPENABLE) activity.startActivityForResult(intent,1); function onActivityResult(requestCode,resultCode,data) if resultCode == Activity.RESULT_OK then local str = data.getData().toString() local decodeStr = URLDecoder.decode(str,\u0026#34;UTF-8\u0026#34;) print(decodeStr) end end end ChooseFile() 分享文件 #  function Sharing(path) import \u0026quot;android.webkit.MimeTypeMap\u0026quot; import \u0026quot;android.content.Intent\u0026quot; import \u0026quot;android.net.Uri\u0026quot; import \u0026quot;java.io.File\u0026quot; FileName=tostring(File(path).Name) ExtensionName=FileName:match(\u0026quot;%.(.+)\u0026quot;) Mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(ExtensionName) intent = Intent() intent.setAction(Intent.ACTION_SEND) intent.setType(Mime) file = File(path) uri = Uri.fromFile(file) intent.putExtra(Intent.EXTRA_STREAM,uri) intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK) activity.startActivity(Intent.createChooser(intent, \u0026quot;分享到:\u0026quot;)) end Sharing(文件路径)  调用通信 #  发送短信 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; uri = Uri.parse(\u0026#34;smsto:10010\u0026#34;) intent = Intent(Intent.ACTION_SENDTO, uri) intent.putExtra(\u0026#34;sms_body\u0026#34;,\u0026#34;cxll\u0026#34;) intent.setAction(\u0026#34;android.intent.action.VIEW\u0026#34;) activity.startActivity(intent) 发送彩信 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; uri=Uri.parse(\u0026#34;file:///sdcard/a.png\u0026#34;) --图片路径 intent= Intent(); intent.setAction(Intent.ACTION_SEND); intent.putExtra(\u0026#34;address\u0026#34;,mobile) --邮件地址 intent.putExtra(\u0026#34;sms_body\u0026#34;,content) --邮件内容 intent.putExtra(Intent.EXTRA_STREAM,uri) intent.setType(\u0026#34;image/png\u0026#34;) --设置类型 this.startActivity(intent) 拨打电话 #  import \u0026#34;android.net.Uri\u0026#34; import \u0026#34;android.content.Intent\u0026#34; uri = Uri.parse(\u0026#34;tel:10010\u0026#34;) intent = Intent(Intent.ACTION_CALL, uri) intent.setAction(\u0026#34;android.intent.action.VIEW\u0026#34;) activity.startActivity(intent) 调用应用商店搜索应用 #  import \u0026#34;android.content.Intent\u0026#34; import \u0026#34;android.net.Uri\u0026#34; intent = Intent(\u0026#34;android.intent.action.VIEW\u0026#34;) intent .setData(Uri.parse( \u0026#34;market://details?id=\u0026#34;..activity.getPackageName())) this.startActivity(intent) 设备信息 #  获取系统SDK，Android版本及设备型号 #  device_model = Build.MODEL --设备型号 version_sdk = Build.VERSION.SDK --设备SDK版本 version_release = Build.VERSION.RELEASE --设备的系统版本 获取设备标识码 #  import \u0026#34;android.provider.Settings$Secure\u0026#34; android_id = Secure.getString(activity.getContentResolver(), Secure.ANDROID_ID) 获取IMEI #  import \u0026#34;android.content.Context\u0026#34; imei=activity.getSystemService(Context.TELEPHONY_SERVICE).getDeviceId() 精准获取屏幕尺寸 #  function getScreenPhysicalSize(ctx) import \u0026#34;android.util.DisplayMetrics\u0026#34; dm = DisplayMetrics(); ctx.getWindowManager().getDefaultDisplay().getMetrics(dm); diagonalPixels = Math.sqrt(Math.pow(dm.widthPixels, 2) + Math.pow(dm.heightPixels, 2)); return diagonalPixels / (160 * dm.density); end print(getScreenPhysicalSize(activity)) 获取手机存储空间 #  --获取手机内置剩余存储空间 function GetSurplusSpace() fs = StatFs(Environment.getDataDirectory().getPath()) return Formatter.formatFileSize(activity, (fs.getAvailableBytes())) end --获取手机内置存储总空间 function GetTotalSpace() path = Environment.getExternalStorageDirectory() stat = StatFs(path.getPath()) blockSize = stat.getBlockSize() totalBlocks = stat.getBlockCount() return Formatter.formatFileSize(activity, blockSize * totalBlocks) end 获取手机内置存储路径 #  Environment.getExternalStorageDirectory().toString() 获取已安装程序的包名、版本号、最后更新时间、图标、应用名称 #  function GetAppInfo(包名) import \u0026#34;android.content.pm.PackageManager\u0026#34; local pm = activity.getPackageManager(); local 图标 = pm.getApplicationInfo(tostring(包名),0) local 图标 = 图标.loadIcon(pm); local pkg = activity.getPackageManager().getPackageInfo(包名, 0); local 应用名称 = pkg.applicationInfo.loadLabel(activity.getPackageManager()) local 版本号 = activity.getPackageManager().getPackageInfo(包名, 0).versionName local 最后更新时间 = activity.getPackageManager().getPackageInfo(包名, 0).lastUpdateTime local cal = Calendar.getInstance(); cal.setTimeInMillis(最后更新时间); local 最后更新时间 = cal.getTime().toLocaleString() return 包名,版本号,最后更新时间,图标,应用名称 end 获取指定安装包的包名,图标,应用名 #  import \u0026#34;android.content.pm.PackageManager\u0026#34; import \u0026#34;android.content.pm.ApplicationInfo\u0026#34; function GetApkInfo(archiveFilePath) pm = activity.getPackageManager() info = pm.getPackageArchiveInfo(archiveFilePath, PackageManager.GET_ACTIVITIES); if info ~= nil then appInfo = info.applicationInfo; appName = tostring(pm.getApplicationLabel(appInfo)) packageName = appInfo.packageName; --安装包名称 version=info.versionName; --版本信息 icon = pm.getApplicationIcon(appInfo);--图标 end return packageName,version,icon end 获取某程序是否安装 #  if pcall(function() activity.getPackageManager().getPackageInfo(\u0026#34;包名\u0026#34;,0) end) then print(\u0026#34;已安装\u0026#34;) else print(\u0026#34;未安装\u0026#34;) end 获取IMEI号 #  import \u0026#34;android.content.*\u0026#34; --导入包 imei=activity.getSystemService(Context.TELEPHONY_SERVICE).getDeviceId(); print(imei) --别忘了添加权限\u0026#34;READ_PHONE_STATE\u0026#34; 获取运营商名称 #  import \u0026#34;android.content.Context\u0026#34; 运营商名称 = this.getSystemService(Context.TELEPHONY_SERVICE).getNetworkOperatorName() print(运营商名称) --添加权限 READ_PHONE_STATE 获取本地时间 #  --格式的时间 os.date(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) --本地时间总和 os.clock() "},{"id":14,"href":"/docs/04/0407caculate/","title":"04-07 各式算法","section":"04-00 MLUA教程","content":"各种算法 #  From MLUA  字符串MD5 #   代码详情 ...  function MD5(str) local HexTable = {\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;F\u0026#34;} local A = 0x67452301 local B = 0xefcdab89 local C = 0x98badcfe local D = 0x10325476 local S11 = 7 local S12 = 12 local S13 = 17 local S14 = 22 local S21 = 5 local S22 = 9 local S23 = 14 local S24 = 20 local S31 = 4 local S32 = 11 local S33 = 16 local S34 = 23 local S41 = 6 local S42 = 10 local S43 = 15 local S44 = 21 local function F(x,y,z) return (x \u0026amp; y) | ((~x) \u0026amp; z) end local function G(x,y,z) return (x \u0026amp; z) | (y \u0026amp; (~z)) end local function H(x,y,z) return x ~ y ~ z end local function I(x,y,z) return y ~ (x | (~z)) end local function FF(a,b,c,d,x,s,ac) a = a + F(b,c,d) + x + ac a = (((a \u0026amp; 0xffffffff) \u0026lt;\u0026lt; s) | ((a \u0026amp; 0xffffffff) \u0026gt;\u0026gt; 32 - s)) + b return a \u0026amp; 0xffffffff end local function GG(a,b,c,d,x,s,ac) a = a + G(b,c,d) + x + ac a = (((a \u0026amp; 0xffffffff) \u0026lt;\u0026lt; s) | ((a \u0026amp; 0xffffffff) \u0026gt;\u0026gt; 32 - s)) + b return a \u0026amp; 0xffffffff end local function HH(a,b,c,d,x,s,ac) a = a + H(b,c,d) + x + ac a = (((a \u0026amp; 0xffffffff) \u0026lt;\u0026lt; s) | ((a \u0026amp; 0xffffffff) \u0026gt;\u0026gt; 32 - s)) + b return a \u0026amp; 0xffffffff end local function II(a,b,c,d,x,s,ac) a = a + I(b,c,d) + x + ac a = (((a \u0026amp; 0xffffffff) \u0026lt;\u0026lt; s) | ((a \u0026amp; 0xffffffff) \u0026gt;\u0026gt; 32 - s)) + b return a \u0026amp; 0xffffffff end local function MD5StringFill(s) local len = s:len() local mod512 = len * 8 % 512 --需要填充的字节数 local fillSize = (448 - mod512) // 8 if mod512 \u0026gt; 448 then fillSize = (960 - mod512) // 8 end local rTab = {} --记录当前byte在4个字节的偏移 local byteIndex = 1 for i = 1,len do local index = (i - 1) // 4 + 1 rTab[index] = rTab[index] or 0 rTab[index] = rTab[index] | (s:byte(i) \u0026lt;\u0026lt; (byteIndex - 1) * 8) byteIndex = byteIndex + 1 if byteIndex == 5 then byteIndex = 1 end end --先将最后一个字节组成4字节一组 --表示0x80是否已插入 local b0x80 = false local tLen = #rTab if byteIndex ~= 1 then rTab[tLen] = rTab[tLen] | 0x80 \u0026lt;\u0026lt; (byteIndex - 1) * 8 b0x80 = true end --将余下的字节补齐 for i = 1,fillSize // 4 do if not b0x80 and i == 1 then rTab[tLen + i] = 0x80 else rTab[tLen + i] = 0x0 end end --后面加原始数据bit长度 local bitLen = math.floor(len * 8) tLen = #rTab rTab[tLen + 1] = bitLen \u0026amp; 0xffffffff rTab[tLen + 2] = bitLen \u0026gt;\u0026gt; 32 return rTab end -- Func: 计算MD5 -- Param: string -- Return: string --------------------------------------------- function string.md5(s) --填充 local fillTab = MD5StringFill(s) local result = {A,B,C,D} for i = 1,#fillTab // 16 do local a = result[1] local b = result[2] local c = result[3] local d = result[4] local offset = (i - 1) * 16 + 1 --第一轮 a = FF(a, b, c, d, fillTab[offset + 0], S11, 0xd76aa478) d = FF(d, a, b, c, fillTab[offset + 1], S12, 0xe8c7b756) c = FF(c, d, a, b, fillTab[offset + 2], S13, 0x242070db) b = FF(b, c, d, a, fillTab[offset + 3], S14, 0xc1bdceee) a = FF(a, b, c, d, fillTab[offset + 4], S11, 0xf57c0faf) d = FF(d, a, b, c, fillTab[offset + 5], S12, 0x4787c62a) c = FF(c, d, a, b, fillTab[offset + 6], S13, 0xa8304613) b = FF(b, c, d, a, fillTab[offset + 7], S14, 0xfd469501) a = FF(a, b, c, d, fillTab[offset + 8], S11, 0x698098d8) d = FF(d, a, b, c, fillTab[offset + 9], S12, 0x8b44f7af) c = FF(c, d, a, b, fillTab[offset + 10], S13, 0xffff5bb1) b = FF(b, c, d, a, fillTab[offset + 11], S14, 0x895cd7be) a = FF(a, b, c, d, fillTab[offset + 12], S11, 0x6b901122) d = FF(d, a, b, c, fillTab[offset + 13], S12, 0xfd987193) c = FF(c, d, a, b, fillTab[offset + 14], S13, 0xa679438e) b = FF(b, c, d, a, fillTab[offset + 15], S14, 0x49b40821) --第二轮 a = GG(a, b, c, d, fillTab[offset + 1], S21, 0xf61e2562) d = GG(d, a, b, c, fillTab[offset + 6], S22, 0xc040b340) c = GG(c, d, a, b, fillTab[offset + 11], S23, 0x265e5a51) b = GG(b, c, d, a, fillTab[offset + 0], S24, 0xe9b6c7aa) a = GG(a, b, c, d, fillTab[offset + 5], S21, 0xd62f105d) d = GG(d, a, b, c, fillTab[offset + 10], S22, 0x2441453) c = GG(c, d, a, b, fillTab[offset + 15], S23, 0xd8a1e681) b = GG(b, c, d, a, fillTab[offset + 4], S24, 0xe7d3fbc8) a = GG(a, b, c, d, fillTab[offset + 9], S21, 0x21e1cde6) d = GG(d, a, b, c, fillTab[offset + 14], S22, 0xc33707d6) c = GG(c, d, a, b, fillTab[offset + 3], S23, 0xf4d50d87) b = GG(b, c, d, a, fillTab[offset + 8], S24, 0x455a14ed) a = GG(a, b, c, d, fillTab[offset + 13], S21, 0xa9e3e905) d = GG(d, a, b, c, fillTab[offset + 2], S22, 0xfcefa3f8) c = GG(c, d, a, b, fillTab[offset + 7], S23, 0x676f02d9) b = GG(b, c, d, a, fillTab[offset + 12], S24, 0x8d2a4c8a) --第三轮 a = HH(a, b, c, d, fillTab[offset + 5], S31, 0xfffa3942) d = HH(d, a, b, c, fillTab[offset + 8], S32, 0x8771f681) c = HH(c, d, a, b, fillTab[offset + 11], S33, 0x6d9d6122) b = HH(b, c, d, a, fillTab[offset + 14], S34, 0xfde5380c) a = HH(a, b, c, d, fillTab[offset + 1], S31, 0xa4beea44) d = HH(d, a, b, c, fillTab[offset + 4], S32, 0x4bdecfa9) c = HH(c, d, a, b, fillTab[offset + 7], S33, 0xf6bb4b60) b = HH(b, c, d, a, fillTab[offset + 10], S34, 0xbebfbc70) a = HH(a, b, c, d, fillTab[offset + 13], S31, 0x289b7ec6) d = HH(d, a, b, c, fillTab[offset + 0], S32, 0xeaa127fa) c = HH(c, d, a, b, fillTab[offset + 3], S33, 0xd4ef3085) b = HH(b, c, d, a, fillTab[offset + 6], S34, 0x4881d05) a = HH(a, b, c, d, fillTab[offset + 9], S31, 0xd9d4d039) d = HH(d, a, b, c, fillTab[offset + 12], S32, 0xe6db99e5) c = HH(c, d, a, b, fillTab[offset + 15], S33, 0x1fa27cf8) b = HH(b, c, d, a, fillTab[offset + 2], S34, 0xc4ac5665) --第四轮 a = II(a, b, c, d, fillTab[offset + 0], S41, 0xf4292244) d = II(d, a, b, c, fillTab[offset + 7], S42, 0x432aff97) c = II(c, d, a, b, fillTab[offset + 14], S43, 0xab9423a7) b = II(b, c, d, a, fillTab[offset + 5], S44, 0xfc93a039) a = II(a, b, c, d, fillTab[offset + 12], S41, 0x655b59c3) d = II(d, a, b, c, fillTab[offset + 3], S42, 0x8f0ccc92) c = II(c, d, a, b, fillTab[offset + 10], S43, 0xffeff47d) b = II(b, c, d, a, fillTab[offset + 1], S44, 0x85845dd1) a = II(a, b, c, d, fillTab[offset + 8], S41, 0x6fa87e4f) d = II(d, a, b, c, fillTab[offset + 15], S42, 0xfe2ce6e0) c = II(c, d, a, b, fillTab[offset + 6], S43, 0xa3014314) b = II(b, c, d, a, fillTab[offset + 13], S44, 0x4e0811a1) a = II(a, b, c, d, fillTab[offset + 4], S41, 0xf7537e82) d = II(d, a, b, c, fillTab[offset + 11], S42, 0xbd3af235) c = II(c, d, a, b, fillTab[offset + 2], S43, 0x2ad7d2bb) b = II(b, c, d, a, fillTab[offset + 9], S44, 0xeb86d391) --加入到之前计算的结果当中 result[1] = result[1] + a result[2] = result[2] + b result[3] = result[3] + c result[4] = result[4] + d result[1] = result[1] \u0026amp; 0xffffffff result[2] = result[2] \u0026amp; 0xffffffff result[3] = result[3] \u0026amp; 0xffffffff result[4] = result[4] \u0026amp; 0xffffffff end --将Hash值转换成十六进制的字符串 local retStr = \u0026#34;\u0026#34; for i = 1,4 do for _ = 1,4 do local temp = result[i] \u0026amp; 0x0F local str = HexTable[temp + 1] result[i] = result[i] \u0026gt;\u0026gt; 4 temp = result[i] \u0026amp; 0x0F retStr = retStr .. HexTable[temp + 1] .. str result[i] = result[i] \u0026gt;\u0026gt; 4 end end return retStr end return string.md5(str) end --调用示例 print(MD5(\u0026#34;MLua手册\u0026#34;))     "},{"id":15,"href":"/docs/04/0408sent/","title":"04-08 信息\u0026发送","section":"04-00 MLUA教程","content":"判断是否有网络 #  local wl=activity.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE).getActiveNetworkInfo(); if wl== nil then print(\u0026#34;无法连接到服务器\u0026#34;) end 发送邮件 #  import \u0026#34;android.content.Intent\u0026#34; i = Intent(Intent.ACTION_SEND) i.setType(\u0026#34;message/rfc822\u0026#34;) i.putExtra(Intent.EXTRA_EMAIL, {\u0026#34;2113075983@.com\u0026#34;}) i.putExtra(Intent.EXTRA_SUBJECT,\u0026#34;Feedback\u0026#34;) i.putExtra(Intent.EXTRA_TEXT,\u0026#34;Content\u0026#34;) activity.startActivity(Intent.createChooser(i, \u0026#34;Choice\u0026#34;)) 自带Http模块 #  获取内容 get函数 Http.get(url,cookie,charset,header,callback) url 网络请求的链接网址 cookie 使用的cookie，也就是服务器的身份识别信息 charset 内容编码 header 请求头 callback 请求完成后执行的函数 除了url和callback其他参数都不是必须的 回调函数接受四个参数值分别是 code 响应代码，2xx表示成功，4xx表示请求错误，5xx表示服务器错误，-1表示出错 content 内容，如果code是-1，则为出错信息 cookie 服务器返回的用户身份识别信息 header 服务器返回的头信息 向服务器发送数据 post函数 Http.post(url,data,cookie,charset,header,callback) 除了增加了一个data外，其他参数和get完全相同 data 向服务器发送的数据 下载文件 download函数 Http.download(url,path,cookie,header,callback) 参数中没有编码参数，其他同get， path 文件保存路径 需要特别注意一点，只支持同时有127个网络请求，否则会出错 Http其实是对Http.HttpTask的封装，Http.HttpTask使用的更加通用和灵活的形式 参数格式如下 Http.HttpTask( url, String method, cookie, charset, header, callback) 所有参数都是必选，没有则传入nil url 请求的网址 method 请求方法可以是get，post，put，delete等 cookie 身份验证信息 charset 内容编码 header 请求头 callback 回调函数 该函数返回的是一个HttpTask对象， 需要调用execute方法才可以执行， t=Http.HttpTask(xxx) t.execute{data} 注意调用的括号是花括号，内容可以是字符串或者byte数组， 使用这个形式可以自己封装异步上传函数 TrafficStats类 #  import \u0026#34;android.net.TrafficStats\u0026#34; getMobileRxBytes() --获取通过Mobile连接收到的字节总数，不包含WiFi getMobileRxPackets() --获取Mobile连接收到的数据包总数 getMobileTxBytes() --Mobile发送的总字节数 getMobileTxPackets() --Mobile发送的总数据包数 getTotalRxBytes() --获取总的接受字节数，包含Mobile和WiFi等 getTotalRxPackets() --总的接受数据包数，包含Mobile和WiFi等 getTotalTxBytes() --总的发送字节数，包含Mobile和WiFi等 getTotalTxPackets() --发送的总数据包数，包含Mobile和WiFi等 getUidRxBytes(int uid) --获取某个网络UID的接受字节数 getUidTxBytes(int uid) --获取某个网络UID的发送字节数 --例:TrafficStats.getTotalRxBytes() 开启关闭WiFi #  import \u0026#34;android.content.Context\u0026#34; wifi = activity.Context.getSystemService(Context.WIFI_SERVICE) wifi.setWifiEnabled(true)--关闭则false 断开网络 #  import \u0026#34;android.content.Context\u0026#34; wifi = activity.Context.getSystemService(Context.WIFI_SERVICE) wifi.disconnect() WiFi是否打开 #  import \u0026#34;android.content.Context\u0026#34; wifi = activity.Context.getSystemService(Context.WIFI_SERVICE) wi = wifi.isWifiEnabled() WiFi是否连接 #  connManager = activity.getSystemService(Context.CONNECTIVITY_SERVICE) mWifi = connManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI); if tostring(mWifi):find(\u0026#34;none)\u0026#34;) then --未连接 else --连接 end 数据网络是否连接 #  manager = activity.getSystemService(Context.CONNECTIVITY_SERVICE); gprs = manager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE).getState(); if tostring(gprs)== \u0026#34;CONNECTED\u0026#34; then print\u0026#34;当前数据网络\u0026#34; end 获取WiFi信息 #  import \u0026#34;android.content.Context\u0026#34; wifi = activity.Context.getSystemService(Context.WIFI_SERVICE) wifi.getConfiguredNetworks() 获取WiFi状态 #  import \u0026#34;android.content.Context\u0026#34; wifi = activity.Context.getSystemService(Context.WIFI_SERVICE) print(wifi.getWifiState()) IP地址 #  --查看某网站IP地址 address=InetAddress.getByName(\u0026#34;www.10010.com\u0026#34;); --查看本机IP地址 address=InetAddress.getLocalHost(); --查看IP地址 wifi = activity.Context.getSystemService(Context.WIFI_SERVICE).getDhcpInfo() string.match(tostring(wifi),\u0026#34;ipaddr(.-)gate\u0026#34;) 获取Dns #  import \u0026#34;android.content.Context\u0026#34; --获取Dns1 wifi = activity.Context.getSystemService(Context.WIFI_SERVICE).getDhcpInfo() print(string.match(tostring(wifi),\u0026#34;dns1 (.-) dns2\u0026#34;)) --获取Dns2 wifi = activity.Context.getSystemService(Context.WIFI_SERVICE).getDhcpInfo() dns2 = string.match(tostring(wifi),\u0026#34;dns2 (.-) D\u0026#34;) 获取网络名称 #  wifiManager=activity.Context.getSystemService(Context.WIFI_SERVICE); wifiInfo=wifiManager.getConnectionInfo(); print(wifiInfo.getSSID()) 获取WiFi加密类型 #  wifi = activity.Context.getSystemService(Context.WIFI_SERVICE).getConfiguredNetworks() print(string.match(tostring(wifi),[[KeyMgmt: (.-) P]])) 获取网络信号强度 #  wifiManager=activity.Context.getSystemService(Context.WIFI_SERVICE); wifiInfo=wifiManager.getConnectionInfo(); print(wifiInfo.getRssi()) 获取SSID是否被隐藏 #  wifiManager=activity.Context.getSystemService(Context.WIFI_SERVICE); wifiInfo=wifiManager.getConnectionInfo(); print(wifiInfo.getHiddenSSID()) 获取Mac地址 #  wifiManager=activity.Context.getSystemService(Context.WIFI_SERVICE); wifiInfo=wifiManager.getConnectionInfo(); print( wifiInfo.getMacAddress()) "},{"id":16,"href":"/docs/04/0409sthing/","title":"04-09 事件","section":"04-00 MLUA教程","content":"事件 #  播放音频 #  --导入包 import \u0026#34;android.media.MediaPlayer\u0026#34; local 音频播放器=MediaPlayer() function 播放音频(路径) 音频播放器.reset() .setDataSource(路径) .prepare() .start() .setOnCompletionListener({ onCompletion=function() print(\u0026#34;播放完毕\u0026#34;) end}) end 强制结束自身并清除自身数据 #  os.execute(\u0026#34;pm clear \u0026#34;..activity.getPackageName()) 调用系统下载 #  --导入包 import \u0026#34;android.content.Context\u0026#34; import \u0026#34;android.net.Uri\u0026#34; downloadManager=activity.getSystemService(Context.DOWNLOAD_SERVICE); url=Uri.parse(\u0026#34;绝对下载链接\u0026#34;); request=DownloadManager.Request(url); request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE|DownloadManager.Request.NETWORK_WIFI); request.setDestinationInExternalPublicDir(\u0026#34;目录名，可以是Download\u0026#34;,\u0026#34;下载的文件名\u0026#34;); request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); downloadManager.enqueue(request); 获取本应用包名 #  activity.getPackageName() 删除ListView中某项 #  adp.remove(pos) 获取剪贴板内容 #  import\u0026#34;android.content.*\u0026#34; --导入包 a=activity.getSystemService(Context.CLIPBOARD_SERVICE).getText() 对话框Dialog #  --简单对话框 AlertDialog.Builder(this).setTitle(\u0026#34;标题\u0026#34;) .setMessage(\u0026#34;简单消息框\u0026#34;) .setPositiveButton(\u0026#34;确定\u0026#34;,nil) .show(); --带有三个按钮的对话框 AlertDialog.Builder(this) .setTitle(\u0026#34;确认\u0026#34;) .setMessage(\u0026#34;确定吗？\u0026#34;) .setPositiveButton(\u0026#34;是\u0026#34;,nil) .setNegativeButton(\u0026#34;否\u0026#34;,nil) .setNeutralButton(\u0026#34;不知道\u0026#34;,nil) .show(); --带输入框的 AlertDialog.Builder(this) .setTitle(\u0026#34;请输入\u0026#34;) .setIcon(android.R.drawable.ic_dialog_info) .setView(EditText(this)) .setPositiveButton(\u0026#34;确定\u0026#34;, nil) .setNegativeButton(\u0026#34;取消\u0026#34;, nil) .show(); --单选的 AlertDialog.Builder(this) .setTitle(\u0026#34;请选择\u0026#34;) .setIcon(android.R.drawable.ic_dialog_info) .setSingleChoiceItems({\u0026#34;选项1\u0026#34;,\u0026#34;选项2\u0026#34;,\u0026#34;选项3\u0026#34;,\u0026#34;选项4\u0026#34;}, 0, DialogInterface.OnClickListener() { onClick(dialog,which) { dialog.dismiss(); } } ) .setNegativeButton(\u0026#34;取消\u0026#34;, null) .show(); --多选的 AlertDialog.Builder(this) .setTitle(\u0026#34;多选框\u0026#34;) .setMultiChoiceItems({\u0026#34;选项1\u0026#34;,\u0026#34;选项2\u0026#34;,\u0026#34;选项3\u0026#34;,\u0026#34;选项4\u0026#34;}, null, null) .setPositiveButton(\u0026#34;确定\u0026#34;, null) .setNegativeButton(\u0026#34;取消\u0026#34;, null) .show(); --列表的 AlertDialog.Builder(this) .setTitle(\u0026#34;列表框\u0026#34;) .setItems({\u0026#34;列表项1\u0026#34;,\u0026#34;列表项2\u0026#34;,\u0026#34;列表项3\u0026#34;},nil) .setNegativeButton(\u0026#34;确定\u0026#34;,nil) .show(); --图片的 img = ImageView(this); img.setImageResource(R.drawable.icon); AlertDialog.Builder(this) .setTitle(\u0026#34;图片框\u0026#34;) .setView(img) .setPositiveButton(\u0026#34;确定\u0026#34;,nil) .show(); 关于V4的圆形下拉刷新 #  --设置下拉刷新监听事件 swipeRefreshLayout.setOnRefreshListener(this); --设置进度条的颜色 swipeRefreshLayout.setColorSchemeColors(Color.RED, Color.BLUE, Color.GREEN); --设置圆形进度条大小 swipeRefreshLayout.setSize(SwipeRefreshLayout.LARGE); --设置进度条背景颜色 swipeRefreshLayout.setProgressBackgroundColorSchemeColor(Color.DKGRAY); --设置下拉多少距离之后开始刷新数据 swipeRefreshLayout.setDistanceToTriggerSync(50); 窗口回调事件 #  function onActivityResult() --事件 end 列表下滑到最底事件 #  list.setOnScrollListener{ onScrollStateChanged=function(l,s) if list.getLastVisiblePosition()==list.getCount()-1 then --事件 end end} 按两次返回键退出 #  参数=0 function onKeyDown(code,event) if string.find(tostring(event),\u0026#34;KEYCODE_BACK\u0026#34;) ~= nil then if 参数+2 \u0026gt; tonumber(os.time()) then activity.finish() else Toast.makeText(activity,\u0026#34;再按一次返回键退出\u0026#34; , Toast.LENGTH_SHORT ) .show() 参数=tonumber(os.time()) end return true end end 延迟 #  --这个会卡进程，配合线程使用 Thread.sleep(延迟时间) --这个不会卡进程 --500指延迟500毫秒 task(500,function() --延迟之后执行的事件 end) 定时器 #  --timer定时器 t=timer(function() --事件 end,延迟,间隔,初始化) --暂停timer定时器 t.Enable=false --启动timer定时器 t.Enable=true --Ticker定时器 ti=Ticker() ti.Period=间隔 ti.onTick=function() --事件 end --启动Ticker定时器 ti.start() --停止Ticker定时器 ti.stop() 复制文本到剪贴板 #  --先导入包 import \u0026#34;android.content.*\u0026#34; activity.getSystemService(Context.CLIPBOARD_SERVICE).setText(文本) 保存图片到本地 #  function SavePicture(name,bm) if bm then import \u0026#34;java.io.FileOutputStream\u0026#34; import \u0026#34;java.io.File\u0026#34; import \u0026#34;android.graphics.Bitmap\u0026#34; name=tostring(name) f = File(name) out = FileOutputStream(f) bm.compress(Bitmap.CompressFormat.PNG,90, out) out.flush() out.close() return true else return false end end 查询本地所有图片 #  function QueryAllImage() import \u0026#34;android.provider.MediaStore\u0026#34; cursor = activity.ContentResolver mImageUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; mCursor = cursor.query(mImageUri,nil,nil,nil,MediaStore.Images.Media.DATE_TAKEN) mCursor.moveToLast() imageTable={} while mCursor.moveToPrevious() do path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Images.Media.DATA)) table.insert(imageTable,tostring(path)) end mCursor.close() return imageTable end --返回一个表 递归查找文件 #  function outPath(ret) for i,p in pairs(luajava.astable(ret)) do print(p) end end function find(catalog,name) local n=0 local t=os.clock() local ret={} require \u0026#34;import\u0026#34; import \u0026#34;java.io.File\u0026#34; import \u0026#34;java.lang.String\u0026#34; function FindFile(catalog,name) local name=tostring(name) local ls=catalog.listFiles() or File{} for 次数=0,#ls-1 do --local 目录=tostring(ls[次数]) local f=ls[次数] if f.isDirectory() then--如果是文件夹则继续匹配 FindFile(f,name) else--如果是文件则 n=n+1 if n%1000==0 then print(n,os.clock()-t) end local nm=f.Name if string.find(nm,name) then --thread(insert,目录) table.insert(ret,tostring(f)) end end luajava.clear(f) end end FindFile(catalog,name) call(\u0026#34;outPath\u0026#34;,ret) end import \u0026#34;java.io.File\u0026#34; catalog=File(\u0026#34;/sdcard/AndroLua\u0026#34;) name=\u0026#34;.j?pn?g\u0026#34; thread(find,catalog,name) 查询本地所有视频 #  function QueryAllVideo() import \u0026#34;android.provider.MediaStore\u0026#34; cursor = activity.ContentResolver mImageUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI; mCursor = cursor.query(mImageUri,nil,nil,nil,MediaStore.Video.Media.DATE_TAKEN) mCursor.moveToLast() VideoTable={} while mCursor.moveToPrevious() do path = mCursor.getString(mCursor.getColumnIndex(MediaStore.Video.Media.DATA)) table.insert(VideoTable,tostring(path)) end mCursor.close() return VideoTable end --返回一个表 播放音乐与视频 #  import \u0026#34;android.media.MediaPlayer\u0026#34; mediaPlayer = MediaPlayer() --初始化参数 mediaPlayer.reset() --设置播放资源 mediaPlayer.setDataSource(\u0026#34;storage/sdcard0/a.mp3\u0026#34;) --开始缓冲资源 mediaPlayer.prepare() --是否循环播放该资源 mediaPlayer.setLooping(true) --缓冲完成的监听 mediaPlayer.setOnPreparedListener(MediaPlayer.OnPreparedListener() { onPrepared=function(mediaPlayer mediaPlayer.start() end}); --是否在播放 mediaPlayer.isPlaying() --暂停播放 mediaPlayer.pause() --从30位置开始播放 mediaPlayer.seekTo(30) --停止播放 mediaPlayer.stop() --播放视频 --视频的播放与音乐播放过程一样： --先创建一个媒体对象 import \u0026#34;android.media.MediaPlayer\u0026#34; mediaPlayer = MediaPlayer() --初始化参数 mediaPlayer.reset() --设置播放资源 mediaPlayer.setDataSource(\u0026#34;storage/sdcard0/a.mp4\u0026#34;) --拿到显示的SurfaceView sh = surfaceView.getHolder() sh.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS) --设置显示SurfaceView mediaPlayer.setDisplay(sh) --设置音频流格式 mediaPlayer.setAudioStreamType(AudioManager.Stream_Music) --开始缓冲资源 mediaPlayer.prepare() --缓冲完成的监听 mediaPlayer.setOnPreparedListener(MediaPlayer.OnPreparedListener{ onPrepared=function(mediaPlayer) --开始播放 mediaPlayer.start() end }); --释放播放器 mediaPlayer.release() --非原创 自定义默认弹窗标题,消息,按钮的颜色 #  dialog=AlertDialog.Builder(this) .setTitle(\u0026#34;标题\u0026#34;) .setMessage(\u0026#34;消息\u0026#34;) .setPositiveButton(\u0026#34;积极\u0026#34;,{onClick=function(v) print\u0026#34;点击了积极按钮\u0026#34;end}) .setNeutralButton(\u0026#34;中立\u0026#34;,nil) .setNegativeButton(\u0026#34;否认\u0026#34;,nil) .show() dialog.create() --更改消息颜色 message=dialog.findViewById(android.R.id.message) message.setTextColor(0xff1DA6DD) --更改Button颜色 import \u0026#34;android.graphics.Color\u0026#34; dialog.getButton(dialog.BUTTON_POSITIVE).setTextColor(0xff1DA6DD) dialog.getButton(dialog.BUTTON_NEGATIVE).setTextColor(0xff1DA6DD) dialog.getButton(dialog.BUTTON_NEUTRAL).setTextColor(0xff1DA6DD) --更改Title颜色 import \u0026#34;android.text.SpannableString\u0026#34; import \u0026#34;android.text.style.ForegroundColorSpan\u0026#34; import \u0026#34;android.text.Spannable\u0026#34; sp = SpannableString(\u0026#34;标题\u0026#34;) sp.setSpan(ForegroundColorSpan(0xff1DA6DD),0,#sp,Spannable.SPAN_EXCLUSIVE_INCLUSIVE) dialog.setTitle(sp) 获取视频第一帧 #  function GetVideoFrame(path) import \u0026#34;android.media.MediaMetadataRetriever\u0026#34; media = MediaMetadataRetriever() media.setDataSource(tostring(path)) return media.getFrameAtTime() end 选择文件模块 #  import \u0026#34;android.widget.ArrayAdapter\u0026#34; import \u0026#34;android.widget.LinearLayout\u0026#34; import \u0026#34;android.widget.TextView\u0026#34; import \u0026#34;java.io.File\u0026#34; import \u0026#34;android.widget.ListView\u0026#34; import \u0026#34;android.app.AlertDialog\u0026#34; function ChoiceFile(StartPath,callback) --创建ListView作为文件列表 lv=ListView(activity).setFastScrollEnabled(true) --创建路径标签 cp=TextView(activity) lay=LinearLayout(activity).setOrientation(1).addView(cp).addView(lv) ChoiceFile_dialog=AlertDialog.Builder(activity)--创建对话框 .setTitle(\u0026#34;选择文件\u0026#34;) .setView(lay) .show() adp=ArrayAdapter(activity,android.R.layout.simple_list_item_1) lv.setAdapter(adp) function SetItem(path) path=tostring(path) adp.clear()--清空适配器 cp.Text=tostring(path)--设置当前路径 if path~=\u0026#34;/\u0026#34; then--不是根目录则加上../ adp.add(\u0026#34;../\u0026#34;) end ls=File(path).listFiles() if ls~=nil then ls=luajava.astable(File(path).listFiles()) --全局文件列表变量 table.sort(ls,function(a,b) return (a.isDirectory()~=b.isDirectory() and a.isDirectory()) or ((a.isDirectory()==b.isDirectory()) and a.Name\u0026lt;b.Name) end) else ls={} end for index,c in ipairs(ls) do if c.isDirectory() then--如果是文件夹则 adp.add(c.Name..\u0026#34;/\u0026#34;) else--如果是文件则 adp.add(c.Name) end end end lv.onItemClick=function(l,v,p,s)--列表点击事件 项目=tostring(v.Text) if tostring(cp.Text)==\u0026#34;/\u0026#34; then 路径=ls[p+1] else 路径=ls[p] end if 项目==\u0026#34;../\u0026#34; then SetItem(File(cp.Text).getParentFile()) elseif 路径.isDirectory() then SetItem(路径) elseif 路径.isFile() then callback(tostring(路径)) ChoiceFile_dialog.hide() end end SetItem(StartPath) end --ChoiceFile(StartPath,callback) --第一个参数为初始化路径,第二个为回调函数 --原创 选择路径模块 #  require \u0026#34;import\u0026#34; import \u0026#34;android.widget.ArrayAdapter\u0026#34; import \u0026#34;android.widget.LinearLayout\u0026#34; import \u0026#34;android.widget.TextView\u0026#34; import \u0026#34;java.io.File\u0026#34; import \u0026#34;android.widget.ListView\u0026#34; import \u0026#34;android.app.AlertDialog\u0026#34; function ChoicePath(StartPath,callback) --创建ListView作为文件列表 lv=ListView(activity).setFastScrollEnabled(true) --创建路径标签 cp=TextView(activity) lay=LinearLayout(activity).setOrientation(1).addView(cp).addView(lv) ChoiceFile_dialog=AlertDialog.Builder(activity)--创建对话框 .setTitle(\u0026#34;选择路径\u0026#34;) .setPositiveButton(\u0026#34;OK\u0026#34;,{ onClick=function() callback(tostring(cp.Text)) end}) .setNegativeButton(\u0026#34;Canel\u0026#34;,nil) .setView(lay) .show() adp=ArrayAdapter(activity,android.R.layout.simple_list_item_1) lv.setAdapter(adp) function SetItem(path) path=tostring(path) adp.clear()--清空适配器 cp.Text=tostring(path)--设置当前路径 if path~=\u0026#34;/\u0026#34; then--不是根目录则加上../ adp.add(\u0026#34;../\u0026#34;) end ls=File(path).listFiles() if ls~=nil then ls=luajava.astable(File(path).listFiles()) --全局文件列表变量 table.sort(ls,function(a,b) return (a.isDirectory()~=b.isDirectory() and a.isDirectory()) or ((a.isDirectory()==b.isDirectory()) and a.Name\u0026lt;b.Name) end) else ls={} end for index,c in ipairs(ls) do if c.isDirectory() then--如果是文件夹则 adp.add(c.Name..\u0026#34;/\u0026#34;) end end end lv.onItemClick=function(l,v,p,s)--列表点击事件 项目=tostring(v.Text) if tostring(cp.Text)==\u0026#34;/\u0026#34; then 路径=ls[p+1] else 路径=ls[p] end if 项目==\u0026#34;../\u0026#34; then SetItem(File(cp.Text).getParentFile()) elseif 路径.isDirectory() then SetItem(路径) elseif 路径.isFile() then callback(tostring(路径)) ChoiceFile_dialog.hide() end end SetItem(StartPath) end import \u0026#34;android.os.*\u0026#34; ChoicePath(Environment.getExternalStorageDirectory().toString(), function(path) print(path) end) --第一个参数为初始化路径,第二个为回调函数 --原创 获取视图中的所有文本 #  function GetAllText(view) textTable={} function GetText(Parent) local number=Parent.getChildCount() for i=0,number do local view=Parent.getChildAt(i) if pcall(function()view.addView(TextView(activity))end) then GetText(view) elseif pcall(function()view.getText()end) then table.insert(textTable,tostring(view.Text)) end end end GetText(view) return textTable end print(table.unpack(GetAllText(Parent))) "},{"id":17,"href":"/docs/04/0410file/","title":"04-10 文件处理","section":"04-00 MLUA教程","content":"递归搜索文件实例 #  require \u0026#34;import\u0026#34; function find(catalog,name) local n=0 local t=os.clock() local ret={} require \u0026#34;import\u0026#34; import \u0026#34;java.io.File\u0026#34; import \u0026#34;java.lang.String\u0026#34; function FindFile(catalog,name) local name=tostring(name) local ls=catalog.listFiles() or File{} for 次数=0,#ls-1 do --local 目录=tostring(ls[次数]) local f=ls[次数] if f.isDirectory() then--如果是文件夹则继续匹配 FindFile(f,name) else--如果是文件则 n=n+1 if n%1000==0 then --print(n,os.clock()-t) end local nm=f.Name if string.find(nm,name) then --thread(insert,目录) table.insert(ret,nm) print(nm) end end luajava.clear(f) end end FindFile(catalog,name) print(\u0026#34;ok\u0026#34;,n,#ret) end import \u0026#34;java.io.File\u0026#34; catalog=File(\u0026#34;sdcard/\u0026#34;) name=\u0026#34;.j?pn?g\u0026#34; --task(find,catalog,name,print) thread(find,catalog,name) 获取Lua文件的执行路径 #  activity.getLuaDir() 压缩成ZIP #  ZipUtil.zip(\u0026#34;文件或文件夹路径\u0026#34;,\u0026#34;压缩到的路径\u0026#34;) ZIP解压 #  ZipUtil.unzip(\u0026#34;ZIP路径\u0026#34;,\u0026#34;解压到的路径\u0026#34;) --另一种Java方法 import \u0026#34;java.io.FileOutputStream\u0026#34; import \u0026#34;java.util.zip.ZipFile\u0026#34; import \u0026#34;java.io.File\u0026#34; zipfile = \u0026#34;/sdcard/压缩包.zip\u0026#34;--压缩文件路径和文件名 sdpath = \u0026#34;/sdcard/文件.lua\u0026#34;--解压后路径和文件名 zipfilepath = \u0026#34;内容.lua\u0026#34;--需要解压的文件名 function unzip(zippath , outfilepath , filename) local time=os.clock() task(function(zippath,outfilepath,filename) require \u0026#34;import\u0026#34; import \u0026#34;java.util.zip.*\u0026#34; import \u0026#34;java.io.*\u0026#34; local file = File(zippath) local outFile = File(outfilepath) local zipFile = ZipFile(file) local entry = zipFile.getEntry(filename) local input = zipFile.getInputStream(entry) local output = FileOutputStream(outFile) local byte=byte[entry.getSize()] local temp=input.read(byte) while temp ~= -1 do output.write(byte) temp=input.read(byte) end input.close() output.close() end,zippath,outfilepath,filename, function() print(\u0026#34;解压完成，耗时 \u0026#34;..os.clock()-time..\u0026#34; s\u0026#34;) end) end unzip(zipfile,sdpath,zipfilepath) 删除文件夹 #  --shell命令的方法 os.execute(\u0026#34;rm-r 路径\u0026#34;) 重命名文件夹 #  --shell命令的方法 os.execute(\u0026#34;mv 路径新路径\u0026#34;) 创建文件夹 #  --shell命令的方法 os.execute(\u0026#34;mkdir 路径\u0026#34;) 删除文件 #  os.remove(\u0026#34;路径\u0026#34;) 判断文件是否存在 #  --先导入io包 import \u0026#34;java.io.*\u0026#34; file,err=io.open(\u0026#34;路径\u0026#34;) print(err) if err==nil then print(\u0026#34;存在\u0026#34;) else print(\u0026#34;不存在\u0026#34;) end 判断文件夹是否存在 #  --先导入io包 import \u0026#34;java.io.*\u0026#34; if File(文件夹路径).isDirectory()then print(\u0026#34;存在\u0026#34;) else print(\u0026#34;不存在\u0026#34;) end 创建新文件 #  --使用File类 import \u0026#34;java.io.File\u0026#34;--导入File类 File(文件路径).createNewFile() --使用io库 io.open(\u0026#34;/sdcard/aaaa\u0026#34;, \u0026#39;w\u0026#39;) 创建新文件夹 #  --使用File类 import \u0026#34;java.io.File\u0026#34;--导入File类 File(文件夹路径).mkdir() --创建多级文件夹 File(文件夹路径).mkdirs() --shell os.execute(\u0026#39;mkdir \u0026#39;..文件夹路径) 重命名与移动文件 #  --Shell os.execute(\u0026#34;mv \u0026#34;..oldname..\u0026#34; \u0026#34;..newname) --os os.rename (oldname, newname) --File import \u0026#34;java.io.File\u0026#34;--导入File类 File(旧).renameTo(File(新)) 追加更新文件 #  io.open(文件路径,\u0026#34;a+\u0026#34;):write(\u0026#34;更新的内容\u0026#34;):close() 更新文件 #  io.open(文件路径,\u0026#34;w+\u0026#34;):write(\u0026#34;更新的内容\u0026#34;):close() 写入文件 #  io.open(文件路径,\u0026#34;w\u0026#34;):write(\u0026#34;内容\u0026#34;):close() 写入文件(自动创建父文件夹) #  function 写入文件(路径,内容) import \u0026#34;java.io.File\u0026#34; f=File(tostring(File(tostring(路径)).getParentFile())).mkdirs() io.open(tostring(路径),\u0026#34;w\u0026#34;):write(tostring(内容)):close() end 读取文件 #  io.open(文件路径):read(\u0026#34;*a\u0026#34;) 按行读取文件 #  for c in io.lines(文件路径) do print(c) end 删除文件或文件夹 #  --使用File类 import \u0026#34;java.io.File\u0026#34;--导入File类 File(文件路径).delete() --使用os方法 os.remove (filename) 复制文件 #  LuaUtil.copyDir(from,to) 递归删除文件夹或文件 #  --使用LuaUtil辅助库 LuaUtil.rmDir(路径) --使用Shell os.execute(\u0026#34;rm -r \u0026#34;..路径) 替换文件内字符串 #  function 替换文件字符串(路径,要替换的字符串,替换成的字符串) if 路径 then 路径=tostring(路径) 内容=io.open(路径):read(\u0026#34;*a\u0026#34;) io.open(路径,\u0026#34;w+\u0026#34;):write(tostring(内容:gsub(要替换的字符串,替换成的字符串))):close() else return false end end 获取文件列表 #  import(\u0026#34;java.io.File\u0026#34;) luajava.astable(File(文件夹路径).listFiles()) 获取文件名称 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).getName() 获取文件大小 #  function GetFileSize(path) import \u0026#34;java.io.File\u0026#34; import \u0026#34;android.text.format.Formatter\u0026#34; size=File(tostring(path)).length() Sizes=Formatter.formatFileSize(activity, size) return Sizes end 获取文件或文件夹最后修改时间 #  function GetFilelastTime(path) f = File(path); cal = Calendar.getInstance(); time = f.lastModified() cal.setTimeInMillis(time); return cal.getTime().toLocaleString() end 获取文件字节 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).length() 获取文件父文件夹路径 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(path).getParentFile() 获取文件Mime类型 #  function GetFileMime(name) import \u0026#34;android.webkit.MimeTypeMap\u0026#34; ExtensionName=tostring(name):match(\u0026#34;%.(.+)\u0026#34;) Mime=MimeTypeMap.getSingleton().getMimeTypeFromExtension(ExtensionName) return tostring(Mime) end print(GetFileMime(\u0026#34;/sdcard/a.png\u0026#34;)) 判断路径是不是文件夹 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).isDirectory() --也可用来判断文件夹存不存在 判断路径是不是文件 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).isFile() --也可用来判断文件存不存在 判断文件或文件夹存不存在 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).exists() --使用io function file_exists(path) local f=io.open(path,\u0026#39;r\u0026#39;) if f~=nil then io.close(f) return true else return false end end 判断是不是系统隐藏文件 #  import \u0026#34;java.io.File\u0026#34;--导入File类 File(路径).isHidden() "},{"id":18,"href":"/docs/","title":"WELCOME","section":"Introduction","content":"Introduction #  asoul=100000 if a=1 then b=2 end "},{"id":19,"href":"/docs/04/0411animation/","title":"04-11 动画","section":"04-00 MLUA教程","content":"控件旋转 #  --Z轴上的旋转角度 View.getRotation() --X轴上的旋转角度 View.getRotationX() --Y轴上的旋转角度 View.getRotationY() --设置Z轴上的旋转角度 View.setRotation(r) --设置X轴上的旋转角度 View.setRotationX(r) --设置Y轴上的旋转角度 View.setRotationY(r) --设置旋转中心点的X坐标 View.setPivotX(p) --设置旋转中心点的Y坐标 View.setPivotX(p) --设置摄像机的与旋转目标在Z轴上距离 View.setCameraDistance(d) 动画结束回调 #  --导入包 import \u0026#34;android.view.animation.*\u0026#34; import \u0026#34;android.view.animation.Animation$AnimationListener\u0026#34; --控件动画 控件.startAnimation(AlphaAnimation(1,0).setDuration(400).setFillAfter(true).setAnimationListener(AnimationListener{ onAnimationEnd=function() print\u0026#34;动画结束\u0026#34;) end})) 安卓跳转动画 #  android.R.anim.accelerate_decelerate_interpolator android.R.anim.accelerate_interpolator android.R.anim.anticipate_interpolator android.R.anim.anticipate_overshoot_interpolator android.R.anim.bounce_interpolator android.R.anim.cycle_interpolator android.R.anim.decelerate_interpolatoandroid.R.anim.r android.R.anim.fade_in android.R.anim.fade_out android.R.anim.linear_interpolator android.R.anim.overshoot_interpolator android.R.anim.slide_in_left android.R.anim.slide_out_right Animation(动画) #  --动画主要包括以下几种 Alpha:渐变透明度动画效果 Scale:渐变尺寸伸缩动画效果 Translate:画面转换位置移动动画效果 Rotate:画面转换位置移动动画效果 --共有的属性有 Duration --属性为动画持续时间 时间以毫秒为单位 fillAfter --当设置为true,该动画转化在动画结束后被应用 fillBefore --当设置为true,该动画转化在动画开始前被应用 repeatCount--动画的重复次数 repeatMode --定义重复的行为 startOffset --动画之间的时间间隔，从上次动画停多少时间开始执行下个动画 id.startAnimation(Animation)--设置控件开始应用这个动画 --动画状态监听 import \u0026#34;android.view.animation.Animation$AnimationListener\u0026#34; 动画.setAnimationListener(AnimationListener{ onAnimationStart=function() print\u0026#34;动画开始\u0026#34; end, onAnimationEnd=function() print\u0026#34;动画结束\u0026#34; end, onAnimationRepeat=function() print\u0026#34;动画重复\u0026#34; end}) --实例 --控件向右旋转180度 Rotate_right=RotateAnimation(180, 0, Animation.RELATIVE_TO_SELF, 0.5, Animation.RELATIVE_TO_SELF, 0.5) Rotate_right.setDuration(440) Rotate_right.setFillAfter(true) --控件向左旋转180度 Rotate_left=RotateAnimation(0, 180, Animation.RELATIVE_TO_SELF, 0.5, Animation.RELATIVE_TO_SELF, 0.5) Rotate_left.setDuration(440) Rotate_left.setFillAfter(true) --动画设置___从上往下平移动画 Translate_up_down=TranslateAnimation(0, 0, 55, 0) Translate_up_down.setDuration(800) Translate_up_down.setFillAfter(true) --动画设置___透明动画 Alpha=AlphaAnimation(0,1) Alpha.setDuration(800) --动画参数值 --AlphaAnimation(透明动画) AlphaAnimation(float fromStart,float fromEnd) float fromStart 动画起始透明值 float fromEnd 动画结束透明值 --ScaleAnimation(缩放动画) ScaleAnimation(float fromX, float toX, float fromY, float toY,int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) float fromX 动画起始时 X坐标上的伸缩尺寸 float toX 动画结束时 X坐标上的伸缩尺寸 float fromY 动画起始时Y坐标上的伸缩尺寸 float toY 动画结束时Y坐标上的伸缩尺寸 int pivotXType 动画在X轴相对于物件位置类型 float pivotXValue 动画相对于物件的X坐标的开始位置 int pivotYType 动画在Y轴相对于物件位置类型 float pivotYValue 动画相对于物件的Y坐标的开始位置 --TranslateAnimation(位移动画) TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta) float fromXDelta 动画开始的点离当前View X坐标上的差值 float toXDelta 动画结束的点离当前View X坐标上的差值 float fromYDelta 动画开始的点离当前View Y坐标上的差值 float toYDelta 动画结束的点离当前View Y坐标上的差值 --RotateAnimation(旋转动画) RotateAnimation(float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) float fromDegrees：旋转的开始角度. float toDegrees：旋转的结束角度. int pivotXType：X轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT. float pivotXValue：X坐标的伸缩值 int pivotYType：Y轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT. float pivotYValue：Y坐标的伸缩值. LayoutAnimationController(布局动画控制器) #  --LayoutAnimationController可以控制一组控件按照规定显示 --导入类 import \u0026#34;android.view.animation.AnimationUtils\u0026#34; import \u0026#34;android.view.animation.LayoutAnimationController\u0026#34; --创建一个Animation对象 animation = AnimationUtils.loadAnimation(activity,android.R.anim.slide_in_left) --得到对象 lac = LayoutAnimationController(animation) --设置控件显示的顺序 lac.setOrder(LayoutAnimationController.ORDER_NORMAL) --LayoutAnimationController.ORDER_NORMAL 顺序显示 --LayoutAnimationController.ORDER_REVERSE 反显示 --LayoutAnimationController.ORDER_RANDOM 随机显示 --设置控件显示间隔时间 lac.setDelay(time) --设置组件应用 view.setLayoutAnimation(lac) ObjectAnimator(属性动画) #  ObjectAnimator(对象动画) --属性动画概念： 所谓属性动画： 改变一切能改变的对象的属性值，不同于补间动画 只能改变 alpha，scale，rotate，translate 听着有点抽象，举例子说明。 补间动画能实现的: 1.alpha(透明) --第一个参数为 view对象,第二个参数为 动画改变的类型,第三,第四个参数依次是开始透明度和结束透明度。 alpha = ObjectAnimator.ofFloat(text, \u0026#34;alpha\u0026#34;, 0, 1) alpha.setDuration(2000)--设置动画时间 alpha.setInterpolator(DecelerateInterpolator())--设置动画插入器，减速 alpha.setRepeatCount(-1)--设置动画重复次数，这里-1代表无限 alpha.setRepeatMode(Animation.REVERSE)--设置动画循环模式。 alpha.start()--启动动画。 2.scale(缩放) animatorSet = AnimatorSet()--组合动画 scaleX = ObjectAnimator.ofFloat(text, \u0026#34;scaleX\u0026#34;, 1, 0) scaleY = ObjectAnimator.ofFloat(text, \u0026#34;scaleY\u0026#34;, 1, 0) animatorSet.setDuration(2000) animatorSet.setInterpolator(DecelerateInterpolator()); animatorSet.play(scaleX).with(scaleY)--两个动画同时开始 animatorSet.start(); 3.translate(平移) translationUp = ObjectAnimator.ofFloat(button, \u0026#34;Y\u0026#34;,button.getY(), 0) translationUp.setInterpolator(DecelerateInterpolator()) translationUp.setDuration(1500) translationUp.start() 4. rotate(旋转) set = AnimatorSet() anim = ObjectAnimator .ofFloat(phone, \u0026#34;rotationX\u0026#34;, 0, 180) anim.setDuration(2000) anim2 = ObjectAnimator .ofFloat(phone, \u0026#34;rotationX\u0026#34;, 180, 0) anim2.setDuration(2000) anim3 = ObjectAnimator .ofFloat(phone, \u0026#34;rotationY\u0026#34;, 0, 180) anim3.setDuration(2000) anim4 = ObjectAnimator .ofFloat(phone, \u0026#34;rotationY\u0026#34;, 180, 0) anim4.setDuration(2000) set.play(anim).before(anim2)--先执行anim动画之后在执行anim2 set.play(anim3).before(anim4) set.start() 补间动画不能实现的: 5.android 改变背景颜色的动画实现如下 translationUp = ObjectAnimator.ofInt(button,\u0026#34;backgroundColor\u0026#34;,{Color.RED, Color.BLUE, Color.GRAY,Color.GREEN}) translationUp.setInterpolator(DecelerateInterpolator()) translationUp.setDuration(1500) translationUp.setRepeatCount(-1) translationUp.setRepeatMode(Animation.REVERSE) translationUp.setEvaluator(ArgbEvaluator()) translationUp.start() --[[ ArgbEvaluator：这种评估者可以用来执行类型之间的插值整数值代表ARGB颜色。 FloatEvaluator：这种评估者可以用来执行浮点值之间的插值。 IntEvaluator：这种评估者可以用来执行类型int值之间的插值。 RectEvaluator：这种评估者可以用来执行类型之间的插值矩形值。 由于本例是改变View的backgroundColor属性的背景颜色所以此处使用ArgbEvaluator ]] overridePendingTransition(设置窗口动画) #  activity.overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out) "},{"id":20,"href":"/docs/01/0101sudo/","title":"01-01 开发素养","section":"01-00 初步认识LUA","content":"素养 #   From sudoskys  对于不少小伙伴来说，Androlua是你们接触的第一个开发工具，那么如何使用优美的lua写出规范的代码，提升自己写代码的气质捏？\n请阅读以下内容。\n 📜命名规范 #  常见命名规范 #  小驼峰式 第一个单词首字母小写，后面其他单词首字母大写\n例子 #  myAge=18 myName[10] dianaLove=\u0026#34;me\u0026#34; 大驼峰式 每个单词的第一个字母都要大写。\n例子 #  MyAge=3 MyName[10] DianaLove=\u0026#34;me\u0026#34; 下划线法 可以结合其他方法使用\n例子 #  _My_Age=3 _My_Name[10] _Diana_Love=\u0026#34;me\u0026#34; 匈牙利法 早期的规范，由微软的一个匈牙利人发明的。确定变量的类型，系统却又琐碎。\n要求前缀字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，单词第一个字母大写。\n例子 #  --注意类型 iMyAge=3 --int cMyName[10] --char sDiana_Love=\u0026#34;me\u0026#34; --str  命名规范补充 #   匈牙利法中类型有哪些？ ...  a 数组（Array） b 布尔值（Boolean） by 字节（Byte） c 有符号字符（Char） cb 无符号字符（Char Byte，并没有神马人用的） cr 颜色参考值（Color Ref） cx,cy 坐标差（长度 Short Int） dw 双字（Double Word） fn 函数（Function） h Handle（句柄） i 整形（Int） l 长整型（Long Int） lp 长指针（Long Pointer） m_ 类成员（Class Member） n 短整型（Short Int） np 近程指针（Near Pointer） p 指针（Pointer） s 字符串（String） sz 以 Null 做结尾的字符串型（String with Zero End） w 字（Word）     📚真正的学习Lua #   不要习惯于当CV工程师 #   理由很简单，如果你习惯于依赖示例代码，而不去真正研究这门语言本身或你复制的代码的每一行，你就不能扩展，不能提升，不能写出属于自己的项目，不能自己产出什么东西，永远被别人牵着走。\n 要有一个美的追求 #   有些人写的APP实在是不能入眼的三流APP,比如XX影视什么的。\n人总是追求美的。一个好的独立开发者，\n不仅要会写代码，还要懂配色，设计，运营，开发素养。\n如果你现在写以下APP，你有必要去学习以上内容。\n  五颜六色杀马特APP\n  逻辑奇特，胁迫用户\n  乱开目录，完全不按照绿色规范的流程\n  工程结构和代码逻辑稀烂，难以交流\n   规范开源与提问 #   要开源就不要加密源码\u0026hellip;详见下文话题“开源规范”\n提问详见下文\u0026quot;社区交流素质\u0026quot;\n 🌏社区交流素质 #  如何提问才能更容易收到大佬的帮助 #  有些人进群就求助，也不附上截图或者错误信息，描述还不够清楚，每次看到这种小白，大佬也爱莫能助。\n提问的智慧 👍知乎\n提问的智慧\n提问的智慧简化版本\n 大纲 ...  你可能曾经试过向大牛提问，但是这些提问往往石沉大海，于是你就纳闷了，这些大牛们平时在网上看都性格好好和蔼可亲的样子，怎么一向他们提问变得那么冷漠了？反差实在是太大了。\n其实，出现这样的情况，往往不是对方耍大牌，而是你提问的方式错了。所以这篇文章让大家了解几个原则，让你更好地提问，并获得高回复率。🎓\n原则一、向适当的人提问适当的问题。 大牛们喜欢艰巨的任务和激发思考的好问题。如果你提的问题在百度知道都可以找到答案，就莫怪他们鄙视你了，你也应该反省一下，你自己为什么那么懒？！这些懒人们在高手眼中就像是蛀虫一样，本来大牛们的时间就不多，与其忽视你的傻问题，不如花时间去回答其他更有意义的问题。\n原则二、提问前先搜一搜。 将你的问题放进搜索引擎过滤一遍，这其实不是什么难事，事实证明，90%的问题都可以用搜索引擎解决了，百度不行，用Google，Google不行用知乎。\n什么？怎么搜索？！\n这里刚好有一篇《十大高明的Google搜索技巧》，拿去用吧。\n什么？链接在哪里？！\n看原则二！\n原则三、提问前先试试自己解决。 如果你的问题在网络上找不到答案，你也需要自行思考试图解决，解决不了，再向大牛们提问，大牛们喜欢看勤于思考，喜欢自己动手的人，不要以为你可以随便地忽悠大牛，大牛们的经验比你丰富，一眼就可以看得出你对待问题的态度，所以，认真地思考，准备好你的问题。\n原则四、准确地描述问题。 问题的描述应该包含以下内容：\n   清晰的细节；    问题发生的背景；    提问前做过的调查研究及对其的理解；    提问前为确定问题而采取的诊断步骤；    注意：千万不要用什么「跪求」，「在线等」，「紧急」等之类哗众取宠的词语来吸引大牛的注意，在大牛们看来，这些问题根本不值得去回答。\n原则五、问题解决后向大牛汇报一下结果。 别的不说，别人帮你解决了问题，你得向别人说声谢谢吧，这是最基本的礼节。\n如果你厚道的话，也可以将解决问题的过程写下来，让以后有问题的人不要重蹈覆辙。这个举动不仅是在总结经验，而且是在为自己攒人品，大牛们看到你的总结会欣赏你的作为，以后就更加喜欢回答你的问题，说不定你以后还有机会和大牛们吃吃饭呢。\n好吧，就说到这里，感谢Eric S. Raymond，感谢知乎，感谢搜索引擎们。\n如果你能按以上的五个原则提问，这个世界真的会少很多的噪音，也少了很多抱怨，算是为人类造福了，\n最后，祝大家能够提出好问题，并得到高回复率。\n（题图：月色 by 清溪） https://zhuanlan.zhihu.com/p/19779979\n   📦开源规范 #  为何需要开源？ #   锻炼编程能力。 提高自己的社区知名度。项目的受欢迎程度让你在开源社区出名！ 锻炼运营能力 极客精神。 在IT界，受欢迎开源项目的负责人都很“牛” 贡献社区。造东西给大家用，互相回馈。  什么样的项目开源会遇冷 #   模仿的项目 没人需要的项目 重复造的轮子（而且没有特色）  开源一个项目需要？ #   源码 介绍文档\u0026amp;使用手册 如何助力开发的帮助文档 允许他人贡献代码 问题，公开的issue（不是私聊） 项目现存问题 TODO清单和预期计划  怎样开源一个项目？ #  From sudoskys\n每个程序员都应该有一个 Github \u0026amp;Gitee 账号\n 注册一个 github\u0026amp;gitee 账号去开源，那么不推荐改名字，注册账号时请慎重考虑。\nhttps://gitee.com/\nhttps://github.com/\n如何规范开源项目？ #  规范版本号 #  版本号定义为 0.0.1 。以后我们每次更新，版本号都不一样。\n版本号分三段，分别为：\n 一，重构版本 二，重大功能改进 三，小升级或者 bug 修复  TIPS：0.x.x 可以认为是非正式版本、测试版。 而 1.x.x 开始，是正式发布的版本。\n 规范代码 #  结构，文件名、变量名、函数名、类名等等，不能随随便便改！\n当你的开源项目被贡献时，作为开源合作者，应该去检查代码合不合理、规范等等，合并后产生什么影响。\n 通晓开源协议 #  知名度较高的开源规范分为五种(BSD, Apache, GPL, LGPL, MIT)，它作为行业通用认知，侵权可以诉讼.\n开源协议详细内容 https://zhuanlan.zhihu.com/p/87855729\n开源协议如何选择 http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html\n 如何使用开源 #  详见 https://www.zhihu.com/question/336820269\n开源软件如何盈利 #  详见 https://zhuanlan.zhihu.com/p/133525485\n一般是爱发电和打赏，或者售卖服务.\n"},{"id":21,"href":"/docs/01/0102alua/","title":"01-02 认识Alua写法","section":"01-00 初步认识LUA","content":"打印 #  print\u0026#34;Hello World！\u0026#34; print(\u0026#34;Hello World\u0026#34;) 注释 #  单行注释 -- 多行注释 --[[]] 字符串 #  a=\u0026#34;String\u0026#34; a=[[String]] a=[===[String]===] 赋值 #  a=\u0026#34;Hello World\u0026#34; --lua支持多重赋值 a,b=\u0026#34;String a\u0026#34;,\u0026#34;String b\u0026#34; --交换值 a,b=\u0026#34;String a\u0026#34;,\u0026#34;String b\u0026#34; a,b=b,a For循环 #  --给定条件进行循环 --输出从1到10 for i=1,10 do print(i) end --输出从10到1 for i=10,1,-1 do print(i) end --打印数组a中所有的值 a={\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;} for index,content in pairs(a) do print(content) end While循环 #  --只要条件为真便会一直循环下去 --输出1到10 a=0 while a~=10 do a=a+1 print(a) end --输出10到1 a=11 while a~=1 do a=a-1 print(a) end --打印数组a中的所有值 shuzu={\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;d\u0026#34;} a=0 while a~=#shuzu do a=a+1 print(shuzu[a]) end if(判断语句) #  --判断值是否为真 a=true if a then print(\u0026#34;真\u0026#34;) else print(\u0026#34;假\u0026#34;) end --比较值是否相同 a=true b=false if a==b then print(\u0026#34;真\u0026#34;) else print(\u0026#34;假\u0026#34;) end function(函数) #  函数有两个用途 1.完成指定功能，函数作为调用语句使用 2.计算并返回值，函数作为赋值语句的表达式使用 实例1: function 读取文件(路径) 文件内容=io.open(路径):read(\u0026#34;*a\u0026#34;) return 文件内容--return用来返回值 end 实例2: require \u0026#34;import\u0026#34; import \u0026#34;android.widget.EditText\u0026#34; import \u0026#34;android.widget.LinearLayout\u0026#34; function 编辑框() return EditText(activity) end layout={ LinearLayout; id=\u0026#34;父布局\u0026#34;, {编辑框, id=\u0026#34;edit\u0026#34;, text=\u0026#34;文本\u0026#34;, }, }; activity.setContentView(loadlayout(layout)) --把这段代码放到调试里面去测试 基础代码 #  activity.setTitle(\u0026#39;Title\u0026#39;)--设置窗口标题 activity.setContentView(loadlayout(layout))--设置窗口视图 activity.setTheme(android.R.style.Theme_DeviceDefault_Light)--设置主题 activity.getWidth()--获取屏幕宽 activity.getHeight()--获取屏幕高 activity.newActivity(\u0026#34;main\u0026#34;)--跳转页面 activity.finish()--关闭当前页面 activity.recreate()--重构activity os.exit()--结束程序 tostring()--转换字符串 tonumber()--转换数字 tointeger()--转换整数 --线程 --thread thread(function()print\u0026#34;线程\u0026#34;end) --task task(function()print\u0026#34;线程\u0026#34;end)  ## 打印 ```lua print(打印内容) 控件被单击 #  function 控件ID.onClick() --事件 end 控件ID.onClick=function() --事件 end 控件被长按 #  控件ID.onLongClick=function() --事件 end function 控件ID.onLongClick() --事件 end 控件可视，不可视或隐藏 #  --控件可视 控件ID.setVisibility(View.VISIBLE) --控件不可视 控件ID.setVisibility(View.INVISIBLE) --控件隐藏 控件ID.setVisibility(View.GONE) 提示框 #  import \u0026#34;android.content.DialogInterface\u0026#34; local dl=AlertDialog.Builder(activity) .setTitle(\u0026#34;提示框标题\u0026#34;) .setMessage(\u0026#34;提示框内容\u0026#34;) .setPositiveButton(\u0026#34;按钮标题\u0026#34;,DialogInterface .OnClickListener{ onClick=function(v) --事件 end }) .setNegativeButton(\u0026#34;按钮标题\u0026#34;,nil) .create() dl.show() 读写文件 #  --读文件 local file=io.input(\u0026#34;地址\u0026#34;) local str=io.read(\u0026#34;*a\u0026#34;) io.close() print(str) --写文件 local file=io.output(\u0026#34;地址\u0026#34;) io.write(写入内容) io.flush() io.close() 对话框 #  提示框 #  import \u0026#34;android.content.DialogInterface\u0026#34; local dl=AlertDialog.Builder(activity) .setTitle(\u0026#34;提示框标题\u0026#34;) .setMessage(\u0026#34;提示框内容\u0026#34;) .setPositiveButton(\u0026#34;按钮标题\u0026#34;,DialogInterface .OnClickListener{ onClick=function(v) --事件 end }) .setNegativeButton(\u0026#34;按钮标题\u0026#34;,nil) .create() dl.show() 加载框示例 #  local dl=ProgressDialog.show(activity,nil,\u0026#39;登录中\u0026#39;) dl.show() local a=0 local tt=Ticker() tt.start() tt.onTick=function() a=a+1 if a==3 then dl.dismiss() tt.stop() end end 关闭对话框 #  --将dl.show赋值 dialog=dl.show() --在某按钮点击后关闭这个对话框 function zc.onClick() dialog.dismiss() end "},{"id":22,"href":"/posts/01new/","title":"文档语法","section":"Blog","content":"文档语法 #   Markdown content\ninfo|warning|danger\n  MacOS MacOS Content #  Linux Linux Content #  Windows Windows Content #     问题 ...  本文档使用的代码来自于     Contribute   导航 0012121000   #  欢迎各位补充本文档   文档格式 #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":23,"href":"/posts/02res/","title":"资源列表","section":"Blog","content":" . ├── 03 │ └── 01 │ └── BiliFanViewer │ └── BiliFanViewer.zip ├── frame.zip ├── lua_Kit.zip └── xiaohe_teach.zip "},{"id":24,"href":"/posts/03vscode/","title":"Lua-App编程上机的三个方案","section":"Blog","content":"Lua-App编程上机的三个方案 三种，不是三步！！\n 原作sudoskys,同步于lua.dianas.cyou\n 1.敲到键盘：Termux搭建code-server,实机调试 #    本篇教程可以让你：拥有一个随身Vscode（python环境），多机协同体验，（映射或反代后远程编写体验），可运行python脚本额外体验，与不受限制的LUA应用编写体验。\n PS：你最好有一定的linux使用经验\u0026hellip;\u0026hellip;\n所需项目 #  Termux #   项目地址 https://gitee.com/mo2/linux\n   下载安装termux GIThub镜像站 https://ghproxy.com/ https://git.yumenaka.net/ APP源 https://f-droid.org/repository/browse/?fdid=com.termux https://github.com/termux/termux-app\n  直链(22年0201):\n  输入termux-setup-storage开启文件访问权限。\n  使用tmoe项目快速搭建debian(推荐)或其他linux环境（请选择proot） （参考https://haohe.fun/2021/04/tmoe-linux%EF%BC%9A%E5%9C%A8android-%E5%92%8Cwindows10%E4%B8%8A%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85-gnu-linux%E5%AE%B9%E5%99%A8/）\n  具体操作\nbash -c \u0026#34;$(curl -fsSL https://gitee.com/mo2/linux/raw/2/2)\u0026#34; 耐心等待安装完毕，请勿熄屏！！！！！！！（要授权什么的）\n 其中，具体选择中，可以创建新用户作为ROOT。（推荐） 这个用户以后使用 su 命令来登陆。 其中，运行proot容器我使用KDE,比较像WIN.容易操作。 其中，一定要看清楚说明信息呃 安装完毕请完全重新启动APP。 输入debian启动最近的容器，终端输入neofetch查看系统信息。 接着输入novnc开启局域网VNC链接，（请确认您安装novnc,tmoe已经为您预装）。\n打开局域网地址（终端输出信息），然后链接。就可以体验卡卡卡卡卡的桌面。\n PS：命令执行都可以使用Ctrl +键盘敲击 C 来中断操作\n  CODE-server（VScode服务端） #  官方安装教程 https://github.com/coder/code-server/blob/main/docs/termux.md#installation\n快捷安装教程\n前要 由于我们到VSCODE的链接不是很稳定，在线安装请全局全球化\u0026hellip;.！\n安装NVM（可选，大概，我也不知道）\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash 问题处理 #  运行安装命令报错 由于termux环境特殊，所以请执行以下操作。\n版本不兼容\n这里补充：最新的4.0.X 对termux有不可名状问题。 详见issuses https://github.com/coder/code-server/issues/4804\n所以我们回退版本。 命令参数详见：https://zhuanlan.zhihu.com/p/375220401\n 所以请使用以下命令安装Code-server！\n 检查  curl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run  安装目标  curl -fsSL https://code-server.dev/install.sh | sh -s -- --version=3.12.0 不支持启动服务\nsudo systemctl enable --now code-server@$USER 报错如下\n System has not been booted with systemd as init system (PID 1). Can't operate. Failed to connect to 原因是Termux好像不支持，挂后台就行\u0026hellip;.\n 安装完毕的配置\n可以链接vnc（推荐），打开文件管理器的（显示隐藏文件选项） 打开 ~/.config/code-server/config.yaml 也可以使用vim呃\n**vim ~/.config/code-server/config.yaml** 具体配置\n \u0026ndash;port 9999指定端口运行，可以修改为80端口，这样就访问的时候就不需要输入端口号 \u0026ndash;host 0.0.0.0 默认是127.0.0.1，只能本地访问，无法外网访问，所以得改成0.0.0.0，才能各个浏览器都能访问  结束\u0026hellip;\u0026hellip;\n服务器端（termux不用看） https://segmentfault.com/a/1190000022267386 https://blog.csdn.net/day_to_die/article/details/105990565 https://cloud.tencent.com/developer/article/1902378\n2.模拟器搭载开发工具 #   具体看这位的博客 https://bk.yyge.net/?post=128\n或者自己下载模拟器安装开发工具即可\u0026hellip;..\n3.专业工具:使用Android studio + 安卓模拟器 #   所需项目 #  安卓模拟器 #  Android Studio 安装 #  一堆SDK #  Androlua 环境支持 #  https://github.com/xiao00kang/AndroLua_Project_Template 这个方案我之前用过，可以用。 具体安装教程网上大把，这里不再赘述。 请 bing.com\n"}]